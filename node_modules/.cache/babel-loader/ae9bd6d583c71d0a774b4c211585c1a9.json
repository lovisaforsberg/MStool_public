{"ast":null,"code":"var _jsxFileName = \"/Users/lovisaforsberg/MS_vis/ms_viz/src/components/textinsight.js\",\n    _s = $RefreshSig$();\n\nimport React, { useContext, useEffect, useRef, useReducer, useState, createContext } from \"react\";\nimport * as d3 from 'd3';\nimport '../../node_modules/@ibm/plex/css/ibm-plex.css';\nimport { SentimentContext } from '../App';\nimport { HoverSentContext } from './graphContainer';\nimport '../style/textinsight.css'; //import Highlighter from \"react-highlight-words\";\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst TextInsight = () => {\n  _s();\n\n  const SentSentimentContext = useContext(SentimentContext);\n  const {\n    choosenSentiment,\n    setChoosenSentiment\n  } = SentSentimentContext;\n  const SentHoverSentContext = useContext(HoverSentContext);\n  const {\n    hoverSent,\n    setHoverSent\n  } = SentHoverSentContext;\n  console.log(hoverSent);\n  const [highlight, setHighlight] = useState('');\n  var sentiment = 'pos';\n  var insight = choosenSentiment.insight_pos;\n  let text = choosenSentiment.insight_full;\n\n  const createHighlight = () => {\n    if (!(insight === '-')) {\n      for (var i = 0; i < insight.length; i++) {\n        text = text.replace(insight[i], match => `<mark class=\"highlight_${sentiment}\">${match}</mark>`);\n      }\n    } else {\n      console.log('fel');\n    }\n  };\n\n  createHighlight();\n  console.log(text); //console.log(createHighlight(choosenSentiment.insight_full))\n  //var replaced = choosenSentiment.insight_full.replace(/[^(\\w\\s]/gi, '')\n  //console.log(replaced)\n  //var text = choosenSentiment.insight_full.replace(/elevant neutral sentiment/g, (match) => `<mark class=\"highlight_${sentiment}\">${match}</mark>`)\n  //console.log(text)\n\n  useEffect(() => {}); // close useeffect\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      children: \"hejhej\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"textInsightContainer\",\n      dangerouslySetInnerHTML: {\n        __html: text\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n\n_s(TextInsight, \"ogaZGjbdBHEK9nIyjTZkJfD4luQ=\");\n\n_c = TextInsight;\nexport default TextInsight;\n\nvar _c;\n\n$RefreshReg$(_c, \"TextInsight\");","map":{"version":3,"sources":["/Users/lovisaforsberg/MS_vis/ms_viz/src/components/textinsight.js"],"names":["React","useContext","useEffect","useRef","useReducer","useState","createContext","d3","SentimentContext","HoverSentContext","TextInsight","SentSentimentContext","choosenSentiment","setChoosenSentiment","SentHoverSentContext","hoverSent","setHoverSent","console","log","highlight","setHighlight","sentiment","insight","insight_pos","text","insight_full","createHighlight","i","length","replace","match","__html"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,UAAhB,EAA4BC,SAA5B,EAAuCC,MAAvC,EAA+CC,UAA/C,EAA2DC,QAA3D,EAAqEC,aAArE,QAA0F,OAA1F;AACA,OAAO,KAAKC,EAAZ,MAAoB,IAApB;AACA,OAAO,+CAAP;AACA,SAAQC,gBAAR,QAA+B,QAA/B;AACA,SAAQC,gBAAR,QAA+B,kBAA/B;AACA,OAAO,0BAAP,C,CACA;;;;;AAIA,MAAMC,WAAW,GAAG,MAAK;AAAA;;AACrB,QAAMC,oBAAoB,GAAGV,UAAU,CAACO,gBAAD,CAAvC;AACA,QAAM;AAACI,IAAAA,gBAAD;AAAmBC,IAAAA;AAAnB,MAA0CF,oBAAhD;AAEA,QAAMG,oBAAoB,GAAGb,UAAU,CAACQ,gBAAD,CAAvC;AACA,QAAM;AAACM,IAAAA,SAAD;AAAYC,IAAAA;AAAZ,MAA4BF,oBAAlC;AACAG,EAAAA,OAAO,CAACC,GAAR,CAAYH,SAAZ;AAEA,QAAM,CAACI,SAAD,EAAYC,YAAZ,IAA4Bf,QAAQ,CAAC,EAAD,CAA1C;AAEA,MAAIgB,SAAS,GAAG,KAAhB;AACA,MAAIC,OAAO,GAAGV,gBAAgB,CAACW,WAA/B;AAEA,MAAIC,IAAI,GAAGZ,gBAAgB,CAACa,YAA5B;;AAEA,QAAMC,eAAe,GAAG,MAAK;AACzB,QAAG,EAAEJ,OAAO,KAAK,GAAd,CAAH,EAAsB;AACnB,WAAK,IAAIK,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAIL,OAAD,CAAUM,MAA9B,EAAsCD,CAAC,EAAvC,EAA2C;AAC1CH,QAAAA,IAAI,GAAGA,IAAI,CAACK,OAAL,CAAaP,OAAO,CAACK,CAAD,CAApB,EAA0BG,KAAD,IAAY,0BAAyBT,SAAU,KAAIS,KAAM,SAAlF,CAAP;AACH;AACA,KAJD,MAKI;AACAb,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAZ;AACH;AAGJ,GAXD;;AAaAQ,EAAAA,eAAe;AACfT,EAAAA,OAAO,CAACC,GAAR,CAAYM,IAAZ,EA7BqB,CA+BrB;AAEA;AACA;AAEA;AACA;;AACAtB,EAAAA,SAAS,CAAC,MAAI,CAEb,CAFQ,CAAT,CAtCqB,CAwClB;;AAEH,sBACI;AAAA,4BACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADA,eAEI;AAAK,MAAA,SAAS,EAAC,sBAAf;AAAsC,MAAA,uBAAuB,EAC5D;AAAC6B,QAAAA,MAAM,EAACP;AAAR;AADD;AAAA;AAAA;AAAA;AAAA,YAFJ;AAAA,kBADJ;AAQH,CAlDD;;GAAMd,W;;KAAAA,W;AAoDN,eAAeA,WAAf","sourcesContent":["import React, { useContext, useEffect, useRef, useReducer, useState, createContext } from \"react\";\nimport * as d3 from 'd3'\nimport '../../node_modules/@ibm/plex/css/ibm-plex.css';\nimport {SentimentContext} from '../App'\nimport {HoverSentContext} from './graphContainer'\nimport '../style/textinsight.css'\n//import Highlighter from \"react-highlight-words\";\n\n\n\nconst TextInsight = () =>{\n    const SentSentimentContext = useContext(SentimentContext);\n    const {choosenSentiment, setChoosenSentiment} = SentSentimentContext\n\n    const SentHoverSentContext = useContext(HoverSentContext)\n    const {hoverSent, setHoverSent} = SentHoverSentContext\n    console.log(hoverSent)\n\n    const [highlight, setHighlight] = useState('')\n\n    var sentiment = 'pos'\n    var insight = choosenSentiment.insight_pos\n\n    let text = choosenSentiment.insight_full\n\n    const createHighlight = () =>{\n        if(!(insight === '-')){\n           for (var i = 0; i < (insight).length; i++ ){\n            text = text.replace(insight[i], (match) => `<mark class=\"highlight_${sentiment}\">${match}</mark>`)\n        } \n        }\n        else{\n            console.log('fel')\n        }\n        \n        \n    }\n\n    createHighlight()\n    console.log(text)\n\n    //console.log(createHighlight(choosenSentiment.insight_full))\n\n    //var replaced = choosenSentiment.insight_full.replace(/[^(\\w\\s]/gi, '')\n    //console.log(replaced)\n\n    //var text = choosenSentiment.insight_full.replace(/elevant neutral sentiment/g, (match) => `<mark class=\"highlight_${sentiment}\">${match}</mark>`)\n    //console.log(text)\n    useEffect(()=>{\n\n    }) // close useeffect\n\n    return(\n        <>\n        <button>hejhej</button>\n            <div className='textInsightContainer' dangerouslySetInnerHTML=\n            {{__html:text}}/>\n\n        </>\n    )\n}\n\nexport default TextInsight;"]},"metadata":{},"sourceType":"module"}