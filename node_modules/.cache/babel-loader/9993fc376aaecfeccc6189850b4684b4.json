{"ast":null,"code":"var _jsxFileName = \"/Users/lovisaforsberg/MS_vis/ms_viz/src/components/graphContainer.js\",\n    _s = $RefreshSig$();\n\nimport React, { useContext, useEffect, useRef, useReducer, useState, createContext, Children } from \"react\";\nimport * as d3 from 'd3';\nimport PieChart from './piechart';\nimport LineChart from './Line_chart';\nimport BarChart from './barchart';\nimport TextInsight from './textinsight';\nimport NetSentiment from './netsentiment';\nimport '../style/graphContainer.css';\nimport { SentimentContext } from '../App';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const HoverSentContext = /*#__PURE__*/createContext({});\nexport const IsPostContext = /*#__PURE__*/createContext({});\nexport const allPostsContext = /*#__PURE__*/createContext({});\n\nconst GraphContainer = () => {\n  _s();\n\n  const SentSentimentContext = useContext(SentimentContext);\n  const {\n    choosenSentiment,\n    setChoosenSentiment\n  } = SentSentimentContext;\n  const [hoverSent, setHoverSent] = useState('');\n  const [navText, setNavText] = useState(choosenSentiment.name);\n  const [navType, setNavType] = useState();\n  const [allPosts, setAllPosts] = useState([]);\n  const [isPost, setIsPost] = useState(false);\n  const [showNet, setShowNet] = useState(false);\n\n  const handlePost = () => {\n    if ('post_content' in choosenSentiment) {\n      setIsPost(true);\n    } else {\n      setIsPost(false);\n    }\n  };\n\n  const handleNav = () => {\n    if ('category' in choosenSentiment) {\n      setNavType('Post: ');\n    } else if (choosenSentiment.name === 'facebook' || choosenSentiment.name === 'instagram' || choosenSentiment.name === 'twitter') {\n      setNavType('Channel: ');\n    } else {\n      setNavType('Category: ');\n    }\n  };\n\n  function startsWithCapital(word) {\n    return word.charAt(0) === word.charAt(0).toUpperCase();\n  }\n\n  useEffect(() => {\n    handlePost();\n    setNavText(choosenSentiment.name);\n    handleNav();\n  });\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"graphTextContainer\",\n      children: /*#__PURE__*/_jsxDEV(HoverSentContext.Provider, {\n        value: {\n          hoverSent,\n          setHoverSent\n        },\n        children: /*#__PURE__*/_jsxDEV(IsPostContext.Provider, {\n          value: {\n            isPost,\n            setIsPost\n          },\n          children: /*#__PURE__*/_jsxDEV(allPostsContext.Provider, {\n            value: {\n              allPosts,\n              setAllPosts\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"text\", {\n              className: \"NaviagationText\",\n              children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                children: navType\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 73,\n                columnNumber: 55\n              }, this), navText]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 73,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"PieBarContainer\",\n              children: [isPost ? null : /*#__PURE__*/_jsxDEV(PieChart, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 77,\n                columnNumber: 46\n              }, this), /*#__PURE__*/_jsxDEV(BarChart, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 79,\n                columnNumber: 29\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 76,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              id: \"cha_button\",\n              className: \"groupButtonActive\",\n              onClick: () => setShowNet(value => !value),\n              children: showNet ? 'hide' : 'show'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 81,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"textContainer\",\n              children: isPost ? /*#__PURE__*/_jsxDEV(TextInsight, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 86,\n                columnNumber: 33\n              }, this) : showNet ? /*#__PURE__*/_jsxDEV(NetSentiment, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 88,\n                columnNumber: 33\n              }, this) : null\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 84,\n              columnNumber: 25\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 9\n    }, this)\n  }, void 0, false);\n};\n\n_s(GraphContainer, \"7mw86Kh1fnwYgZcEVAqh7Fc+rJg=\");\n\n_c = GraphContainer;\nexport default GraphContainer;\n\nvar _c;\n\n$RefreshReg$(_c, \"GraphContainer\");","map":{"version":3,"sources":["/Users/lovisaforsberg/MS_vis/ms_viz/src/components/graphContainer.js"],"names":["React","useContext","useEffect","useRef","useReducer","useState","createContext","Children","d3","PieChart","LineChart","BarChart","TextInsight","NetSentiment","SentimentContext","HoverSentContext","IsPostContext","allPostsContext","GraphContainer","SentSentimentContext","choosenSentiment","setChoosenSentiment","hoverSent","setHoverSent","navText","setNavText","name","navType","setNavType","allPosts","setAllPosts","isPost","setIsPost","showNet","setShowNet","handlePost","handleNav","startsWithCapital","word","charAt","toUpperCase","value"],"mappings":"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","sourcesContent":["import React, { useContext, useEffect, useRef, useReducer, useState, createContext, Children } from \"react\";\nimport * as d3 from 'd3'\nimport PieChart from './piechart'\nimport LineChart from './Line_chart'\nimport BarChart from './barchart'\nimport TextInsight from './textinsight'\nimport NetSentiment from './netsentiment'\nimport '../style/graphContainer.css'\nimport {SentimentContext} from '../App'\n\nexport const HoverSentContext = createContext({})\nexport const IsPostContext = createContext({})\nexport const allPostsContext = createContext({})\n\n\n\nconst GraphContainer = ()=> {\n    const SentSentimentContext = useContext(SentimentContext);\n    const {choosenSentiment, setChoosenSentiment} = SentSentimentContext\n\n    const [hoverSent, setHoverSent] = useState('')\n\n    const [navText, setNavText] = useState(choosenSentiment.name)\n    const [navType, setNavType] = useState()\n\n    const [allPosts, setAllPosts] = useState([])\n\n\n\n\n    const [isPost, setIsPost] = useState(false)\n    const [showNet, setShowNet] = useState(false)\n\n    const handlePost = ()=>{\n        if('post_content' in choosenSentiment){\n            setIsPost(true)\n        }\n        else{\n            setIsPost(false)\n        }\n    }\n\n    const handleNav = () =>{\n        if ('category' in choosenSentiment){\n            setNavType('Post: ')\n        }\n        else if(choosenSentiment.name === 'facebook' || choosenSentiment.name === 'instagram' || choosenSentiment.name === 'twitter'){\n            setNavType('Channel: ')\n        }\n        else{\n            setNavType('Category: ')\n        }\n    }\n\n    function startsWithCapital(word){\n        return word.charAt(0) === word.charAt(0).toUpperCase()\n    }\n\n\n    useEffect(()=>{\n        handlePost()\n        setNavText(choosenSentiment.name)\n        handleNav()\n    })\n\n    return(\n        <>\n        <div className='graphTextContainer'>\n            <HoverSentContext.Provider value = {{hoverSent, setHoverSent}}>\n                <IsPostContext.Provider value = {{isPost, setIsPost}}>\n                    <allPostsContext.Provider value = {{allPosts, setAllPosts}}>\n\n                    <text className='NaviagationText'><strong>{navType}</strong>{navText}</text>\n\n\n                        <div className='PieBarContainer'>\n                            {isPost ? null : <PieChart></PieChart>}\n                            \n                            <BarChart></BarChart>\n                        </div>\n                        <button id='cha_button' className='groupButtonActive' onClick={()=>setShowNet(value=>!value)}>{showNet?'hide':'show'}</button>\n\n\n                        <div className='textContainer'>\n                            {isPost ? \n                                <TextInsight></TextInsight>:\n                                showNet? \n                                <NetSentiment></NetSentiment>:\n                                null} \n                        </div>\n\n                    </allPostsContext.Provider>\n                </IsPostContext.Provider>\n            </HoverSentContext.Provider>\n        </div>\n        </>\n    )\n}\nexport default GraphContainer;"]},"metadata":{},"sourceType":"module"}