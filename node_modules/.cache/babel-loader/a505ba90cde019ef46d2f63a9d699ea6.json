{"ast":null,"code":"var _jsxFileName = \"/Users/lovisaforsberg/MS_vis/ms_viz/src/components/piechart.js\",\n    _s = $RefreshSig$();\n\nimport React, { useContext, useEffect, useRef, useReducer, useState, createContext } from \"react\";\nimport * as d3 from 'd3';\nimport './linechart.css';\nimport { SentimentContext } from '../App';\nimport { HoverSentContext } from './graphContainer';\n/*\navg value to put in csv\navg,30,4,66,27,5,68,23,9,67\n*/\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst PieChart = () => {\n  _s();\n\n  const SentSentimentContext = useContext(SentimentContext);\n  const {\n    choosenSentiment,\n    setChoosenSentiment\n  } = SentSentimentContext;\n  const SentHoverSentContext = useContext(HoverSentContext);\n  const {\n    hoverSent,\n    setHoverSent\n  } = SentHoverSentContext;\n  const d3Container = useRef(null);\n  useEffect(() => {\n    d3.select(\".root_piechart\").selectAll('*').remove();\n    var totals = [{\n      title: \"Positive\",\n      value: 30\n    }, {\n      title: \"Negative\",\n      value: 20\n    }, {\n      title: \"Neutral\",\n      value: 70\n    }];\n    var width = 200;\n    var height = 200;\n    var radius = Math.min(width, height) / 2;\n    var donutWidth = 40;\n    var color = d3.scaleOrdinal().range(['#63A37B', '#F15645', '#E5E5E5']);\n    var svg = d3.select(d3Container.current).attr('class', \"root_piechart\").append('svg').attr('width', width).attr('height', height).append('g').attr('transform', 'translate(' + width / 2 + ',' + height / 2 + ')');\n    var arc = d3.arc().innerRadius(radius - donutWidth).outerRadius(radius);\n    var pie = d3.pie().value(function (d) {\n      return d.value;\n    }).sort(null);\n    var legendRectSize = 13;\n    var legendSpacing = 7;\n    var donutTip = d3.select(\"body\").append(\"div\").attr(\"class\", \"donut-tip\").style(\"opacity\", 0);\n    var path = svg.selectAll('path').data(pie(choosenSentiment.sentiment)).enter().append('path').style(\"cursor\", \"pointer\").attr('d', arc).attr('fill', function (d, i) {\n      return color(d.data.title);\n    }).attr('transform', 'translate(0, 0)').on('mouseover', function (d, i) {\n      /*\n      d3.select(this).transition()\n          .duration('50')\n          .attr('opacity', '.85');\n      donutTip.transition()\n          .duration(50)\n          .style(\"opacity\", 1);\n      let num = (Math.round((d.value / d.data.all) * 100)).toString() + '%';\n      donutTip.html(num)\n          .style(\"left\", (d3.event.pageX + 10) + \"px\")\n          .style(\"top\", (d3.event.pageY - 15) + \"px\");\n      */\n      d3.select('.value_text').remove();\n      svg.append('text').attr('class', 'value_text').attr('x', legendRectSize + legendSpacing).attr('y', legendRectSize - legendSpacing).attr('font-size', '15px').attr('text-anchor', 'middle').text(d.data.title + ': ' + Math.round(d.data.value) + ' %').call(wrap);\n      console.log(choosenSentiment);\n    }).on('mouseout', function (d, i) {\n      d3.select(this).transition().duration('50').attr('opacity', '1');\n      donutTip.transition().duration('50').style(\"opacity\", 0);\n    });\n    /*\n    var legend = svg.selectAll('.legend')\n        .data(color.domain())\n        .enter()\n        .append('g')\n        .attr('class', 'circle-legend')\n        .attr('transform', function (d, i) {\n            var height = legendRectSize + legendSpacing;\n            var offset = height * color.domain().length / 2;\n            var horz = -2 * legendRectSize - 13;\n            var vert = i * height - offset;\n            return 'translate(' + horz + ',' + vert + ')';\n        });\n    \n    legend.append('circle')\n        .style('fill', color)\n        .style('stroke', color)\n        .attr('cx', 0)\n        .attr('cy', 0)\n        .attr('r', '.5rem');\n    \n    legend.append('text')\n        .attr('x', legendRectSize + legendSpacing)\n        .attr('y', legendRectSize - legendSpacing)\n        .text(function (d) {\n            return d;\n        });\n    */\n\n    function change(data) {\n      var pie = d3.pie().value(function (d) {\n        return d.value;\n      }).sort(null)(data);\n      var width = 360;\n      var height = 360;\n      var radius = Math.min(width, height) / 2;\n      var donutWidth = 75;\n      path = d3.select(\"#donut\").selectAll(\"path\").data(pie); // Compute the new angles\n\n      var arc = d3.arc().innerRadius(radius - donutWidth).outerRadius(radius);\n      path.transition().duration(500).attr(\"d\", arc); // redrawing the path with a smooth transition\n    }\n\n    function wrap(text, width) {\n      text.each(function () {\n        var text = d3.select(this),\n            words = text.text().split(/\\s+/).reverse(),\n            word,\n            line = [],\n            lineNumber = 0,\n            lineHeight = 1.1,\n            // ems\n        y = text.attr(\"y\"),\n            dy = parseFloat(text.attr(\"dy\")),\n            tspan = text.text(null).append(\"tspan\").attr(\"x\", 0).attr(\"y\", y).attr(\"dy\", dy + \"em\");\n\n        while (word = words.pop()) {\n          line.push(word);\n          tspan.text(line.join(\" \"));\n\n          if (tspan.node().getComputedTextLength() > width) {\n            line.pop();\n            tspan.text(line.join(\" \"));\n            line = [word];\n            tspan = text.append(\"tspan\").attr(\"x\", 0).attr(\"y\", y).attr(\"dy\", `${++lineNumber * lineHeight + dy}em`).text(word);\n          }\n        }\n      });\n    }\n  }); // close useeffect\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"svg\", {\n      id: \"lineChart\",\n      width: \"200\",\n      height: \"200\",\n      ref: d3Container\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 200,\n      columnNumber: 9\n    }, this)\n  }, void 0, false);\n};\n\n_s(PieChart, \"xFRMPr4wlNF5HttcQFtjqgXWot8=\");\n\n_c = PieChart;\nexport default PieChart;\n\nvar _c;\n\n$RefreshReg$(_c, \"PieChart\");","map":{"version":3,"sources":["/Users/lovisaforsberg/MS_vis/ms_viz/src/components/piechart.js"],"names":["React","useContext","useEffect","useRef","useReducer","useState","createContext","d3","SentimentContext","HoverSentContext","PieChart","SentSentimentContext","choosenSentiment","setChoosenSentiment","SentHoverSentContext","hoverSent","setHoverSent","d3Container","select","selectAll","remove","totals","title","value","width","height","radius","Math","min","donutWidth","color","scaleOrdinal","range","svg","current","attr","append","arc","innerRadius","outerRadius","pie","d","sort","legendRectSize","legendSpacing","donutTip","style","path","data","sentiment","enter","i","on","text","round","call","wrap","console","log","transition","duration","change","each","words","split","reverse","word","line","lineNumber","lineHeight","y","dy","parseFloat","tspan","pop","push","join","node","getComputedTextLength"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,UAAhB,EAA4BC,SAA5B,EAAuCC,MAAvC,EAA+CC,UAA/C,EAA2DC,QAA3D,EAAqEC,aAArE,QAA0F,OAA1F;AACA,OAAO,KAAKC,EAAZ,MAAoB,IAApB;AACA,OAAO,iBAAP;AACA,SAAQC,gBAAR,QAA+B,QAA/B;AACA,SAAQC,gBAAR,QAA+B,kBAA/B;AAIA;AACA;AACA;AACA;;;;;AAEA,MAAMC,QAAQ,GAAG,MAAK;AAAA;;AAElB,QAAMC,oBAAoB,GAAGV,UAAU,CAACO,gBAAD,CAAvC;AACA,QAAM;AAACI,IAAAA,gBAAD;AAAmBC,IAAAA;AAAnB,MAA0CF,oBAAhD;AAEA,QAAMG,oBAAoB,GAAGb,UAAU,CAACQ,gBAAD,CAAvC;AACA,QAAM;AAACM,IAAAA,SAAD;AAAYC,IAAAA;AAAZ,MAA4BF,oBAAlC;AAEA,QAAMG,WAAW,GAAGd,MAAM,CAAC,IAAD,CAA1B;AAEAD,EAAAA,SAAS,CAAC,MAAI;AAEVK,IAAAA,EAAE,CAACW,MAAH,CAAU,gBAAV,EAA4BC,SAA5B,CAAsC,GAAtC,EAA2CC,MAA3C;AAEA,QAAIC,MAAM,GAAG,CAAC;AACVC,MAAAA,KAAK,EAAE,UADG;AAEVC,MAAAA,KAAK,EAAE;AAFG,KAAD,EAIb;AACID,MAAAA,KAAK,EAAE,UADX;AAEIC,MAAAA,KAAK,EAAE;AAFX,KAJa,EAQb;AACID,MAAAA,KAAK,EAAE,SADX;AAEIC,MAAAA,KAAK,EAAE;AAFX,KARa,CAAb;AAcA,QAAIC,KAAK,GAAG,GAAZ;AACA,QAAIC,MAAM,GAAG,GAAb;AACA,QAAIC,MAAM,GAAGC,IAAI,CAACC,GAAL,CAASJ,KAAT,EAAgBC,MAAhB,IAA0B,CAAvC;AACA,QAAII,UAAU,GAAG,EAAjB;AACA,QAAIC,KAAK,GAAGvB,EAAE,CAACwB,YAAH,GACPC,KADO,CACD,CAAC,SAAD,EAAW,SAAX,EAAsB,SAAtB,CADC,CAAZ;AAGA,QAAIC,GAAG,GAAG1B,EAAE,CAACW,MAAH,CAAUD,WAAW,CAACiB,OAAtB,EACTC,IADS,CACJ,OADI,EACK,eADL,EAELC,MAFK,CAEE,KAFF,EAGLD,IAHK,CAGA,OAHA,EAGSX,KAHT,EAILW,IAJK,CAIA,QAJA,EAIUV,MAJV,EAKLW,MALK,CAKE,GALF,EAMLD,IANK,CAMA,WANA,EAMa,eAAgBX,KAAK,GAAG,CAAxB,GACf,GADe,GACRC,MAAM,GAAG,CADD,GACM,GAPnB,CAAV;AASA,QAAIY,GAAG,GAAG9B,EAAE,CAAC8B,GAAH,GACLC,WADK,CACOZ,MAAM,GAAGG,UADhB,EAELU,WAFK,CAEOb,MAFP,CAAV;AAIA,QAAIc,GAAG,GAAGjC,EAAE,CAACiC,GAAH,GACLjB,KADK,CACC,UAAUkB,CAAV,EAAa;AAChB,aAAOA,CAAC,CAAClB,KAAT;AACH,KAHK,EAILmB,IAJK,CAIA,IAJA,CAAV;AAMA,QAAIC,cAAc,GAAG,EAArB;AACA,QAAIC,aAAa,GAAG,CAApB;AAEA,QAAIC,QAAQ,GAAGtC,EAAE,CAACW,MAAH,CAAU,MAAV,EAAkBkB,MAAlB,CAAyB,KAAzB,EACVD,IADU,CACL,OADK,EACI,WADJ,EAEVW,KAFU,CAEJ,SAFI,EAEO,CAFP,CAAf;AAIA,QAAIC,IAAI,GAAGd,GAAG,CAACd,SAAJ,CAAc,MAAd,EACN6B,IADM,CACDR,GAAG,CAAC5B,gBAAgB,CAACqC,SAAlB,CADF,EAENC,KAFM,GAGNd,MAHM,CAGC,MAHD,EAINU,KAJM,CAIA,QAJA,EAIU,SAJV,EAKNX,IALM,CAKD,GALC,EAKIE,GALJ,EAMNF,IANM,CAMD,MANC,EAMO,UAAUM,CAAV,EAAaU,CAAb,EAAgB;AAC1B,aAAOrB,KAAK,CAACW,CAAC,CAACO,IAAF,CAAO1B,KAAR,CAAZ;AACH,KARM,EASNa,IATM,CASD,WATC,EASY,iBATZ,EAUNiB,EAVM,CAUH,WAVG,EAUU,UAAUX,CAAV,EAAaU,CAAb,EAAgB;AAC7B;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACe5C,MAAAA,EAAE,CAACW,MAAH,CAAU,aAAV,EAAyBE,MAAzB;AACAa,MAAAA,GAAG,CAACG,MAAJ,CAAW,MAAX,EACCD,IADD,CACM,OADN,EACe,YADf,EAECA,IAFD,CAEM,GAFN,EAEWQ,cAAc,GAAGC,aAF5B,EAGCT,IAHD,CAGM,GAHN,EAGWQ,cAAc,GAAGC,aAH5B,EAICT,IAJD,CAIM,WAJN,EAImB,MAJnB,EAKCA,IALD,CAKM,aALN,EAKqB,QALrB,EAMCkB,IAND,CAMMZ,CAAC,CAACO,IAAF,CAAO1B,KAAP,GAAc,IAAd,GAAmBK,IAAI,CAAC2B,KAAL,CAAWb,CAAC,CAACO,IAAF,CAAOzB,KAAlB,CAAnB,GAA4C,IANlD,EAOCgC,IAPD,CAOMC,IAPN;AAQCC,MAAAA,OAAO,CAACC,GAAR,CAAY9C,gBAAZ;AAGH,KAnCM,EAoCNwC,EApCM,CAoCH,UApCG,EAoCS,UAAUX,CAAV,EAAaU,CAAb,EAAgB;AAC5B5C,MAAAA,EAAE,CAACW,MAAH,CAAU,IAAV,EAAgByC,UAAhB,GACKC,QADL,CACc,IADd,EAEKzB,IAFL,CAEU,SAFV,EAEqB,GAFrB;AAGAU,MAAAA,QAAQ,CAACc,UAAT,GACKC,QADL,CACc,IADd,EAEKd,KAFL,CAEW,SAFX,EAEsB,CAFtB;AAGH,KA3CM,CAAX;AA6CA;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEQ,aAASe,MAAT,CAAgBb,IAAhB,EAAsB;AAClB,UAAIR,GAAG,GAAGjC,EAAE,CAACiC,GAAH,GACLjB,KADK,CACC,UAAUkB,CAAV,EAAa;AAChB,eAAOA,CAAC,CAAClB,KAAT;AACH,OAHK,EAGHmB,IAHG,CAGE,IAHF,EAGQM,IAHR,CAAV;AAKA,UAAIxB,KAAK,GAAG,GAAZ;AACA,UAAIC,MAAM,GAAG,GAAb;AACA,UAAIC,MAAM,GAAGC,IAAI,CAACC,GAAL,CAASJ,KAAT,EAAgBC,MAAhB,IAA0B,CAAvC;AACA,UAAII,UAAU,GAAG,EAAjB;AAEAkB,MAAAA,IAAI,GAAGxC,EAAE,CAACW,MAAH,CAAU,QAAV,EACFC,SADE,CACQ,MADR,EAEF6B,IAFE,CAEGR,GAFH,CAAP,CAXkB,CAaF;;AAChB,UAAIH,GAAG,GAAG9B,EAAE,CAAC8B,GAAH,GACLC,WADK,CACOZ,MAAM,GAAGG,UADhB,EAELU,WAFK,CAEOb,MAFP,CAAV;AAGAqB,MAAAA,IAAI,CAACY,UAAL,GAAkBC,QAAlB,CAA2B,GAA3B,EAAgCzB,IAAhC,CAAqC,GAArC,EAA0CE,GAA1C,EAjBkB,CAiB8B;AACnD;;AAED,aAASmB,IAAT,CAAcH,IAAd,EAAoB7B,KAApB,EAA2B;AACvB6B,MAAAA,IAAI,CAACS,IAAL,CAAU,YAAW;AACrB,YAAIT,IAAI,GAAG9C,EAAE,CAACW,MAAH,CAAU,IAAV,CAAX;AAAA,YACA6C,KAAK,GAAGV,IAAI,CAACA,IAAL,GAAYW,KAAZ,CAAkB,KAAlB,EAAyBC,OAAzB,EADR;AAAA,YAEAC,IAFA;AAAA,YAGAC,IAAI,GAAG,EAHP;AAAA,YAIAC,UAAU,GAAG,CAJb;AAAA,YAKAC,UAAU,GAAG,GALb;AAAA,YAKkB;AAClBC,QAAAA,CAAC,GAAGjB,IAAI,CAAClB,IAAL,CAAU,GAAV,CANJ;AAAA,YAOAoC,EAAE,GAAGC,UAAU,CAACnB,IAAI,CAAClB,IAAL,CAAU,IAAV,CAAD,CAPf;AAAA,YAQAsC,KAAK,GAAGpB,IAAI,CAACA,IAAL,CAAU,IAAV,EAAgBjB,MAAhB,CAAuB,OAAvB,EAAgCD,IAAhC,CAAqC,GAArC,EAA0C,CAA1C,EAA6CA,IAA7C,CAAkD,GAAlD,EAAuDmC,CAAvD,EAA0DnC,IAA1D,CAA+D,IAA/D,EAAqEoC,EAAE,GAAG,IAA1E,CARR;;AASA,eAAOL,IAAI,GAAGH,KAAK,CAACW,GAAN,EAAd,EAA2B;AACvBP,UAAAA,IAAI,CAACQ,IAAL,CAAUT,IAAV;AACAO,UAAAA,KAAK,CAACpB,IAAN,CAAWc,IAAI,CAACS,IAAL,CAAU,GAAV,CAAX;;AACA,cAAIH,KAAK,CAACI,IAAN,GAAaC,qBAAb,KAAuCtD,KAA3C,EAAkD;AAC9C2C,YAAAA,IAAI,CAACO,GAAL;AACAD,YAAAA,KAAK,CAACpB,IAAN,CAAWc,IAAI,CAACS,IAAL,CAAU,GAAV,CAAX;AACAT,YAAAA,IAAI,GAAG,CAACD,IAAD,CAAP;AACAO,YAAAA,KAAK,GAAGpB,IAAI,CAACjB,MAAL,CAAY,OAAZ,EAAqBD,IAArB,CAA0B,GAA1B,EAA+B,CAA/B,EAAkCA,IAAlC,CAAuC,GAAvC,EAA4CmC,CAA5C,EAA+CnC,IAA/C,CAAoD,IAApD,EAA2D,GAAE,EAAEiC,UAAF,GAAeC,UAAf,GAA4BE,EAAG,IAA5F,EAAiGlB,IAAjG,CAAsGa,IAAtG,CAAR;AACH;AACJ;AACA,OApBD;AAqBH;AAIJ,GA3KQ,CAAT,CAVkB,CAqLf;;AAEH,sBACE;AAAA,2BAEE;AAAK,MAAA,EAAE,EAAC,WAAR;AAAoB,MAAA,KAAK,EAAC,KAA1B;AAAgC,MAAA,MAAM,EAAC,KAAvC;AAA6C,MAAA,GAAG,EAAEjD;AAAlD;AAAA;AAAA;AAAA;AAAA;AAFF,mBADF;AAMH,CA7LD;;GAAMP,Q;;KAAAA,Q;AA+LN,eAAeA,QAAf","sourcesContent":["import React, { useContext, useEffect, useRef, useReducer, useState, createContext } from \"react\";\nimport * as d3 from 'd3'\nimport './linechart.css'\nimport {SentimentContext} from '../App'\nimport {HoverSentContext} from './graphContainer'\n\n\n\n/*\navg value to put in csv\navg,30,4,66,27,5,68,23,9,67\n*/\n\nconst PieChart = ()=> {\n\n    const SentSentimentContext = useContext(SentimentContext);\n    const {choosenSentiment, setChoosenSentiment} = SentSentimentContext\n\n    const SentHoverSentContext = useContext(HoverSentContext)\n    const {hoverSent, setHoverSent} = SentHoverSentContext\n\n    const d3Container = useRef(null)\n\n    useEffect(()=>{\n    \n        d3.select(\".root_piechart\").selectAll('*').remove()\n\n        var totals = [{\n            title: \"Positive\",\n            value: 30,\n        },\n        {\n            title: \"Negative\",\n            value: 20,\n        },\n        {\n            title: \"Neutral\",\n            value: 70,\n        }\n    ];\n\n        var width = 200;\n        var height = 200;\n        var radius = Math.min(width, height) / 2;\n        var donutWidth = 40;\n        var color = d3.scaleOrdinal()\n            .range(['#63A37B','#F15645', '#E5E5E5']);\n        \n        var svg = d3.select(d3Container.current)\n        .attr('class', \"root_piechart\")\n            .append('svg')\n            .attr('width', width)\n            .attr('height', height)\n            .append('g')\n            .attr('transform', 'translate(' + (width / 2) +\n                ',' + (height / 2) + ')');\n        \n        var arc = d3.arc()\n            .innerRadius(radius - donutWidth)\n            .outerRadius(radius);\n        \n        var pie = d3.pie()\n            .value(function (d) {\n                return d.value;\n            })\n            .sort(null);\n        \n        var legendRectSize = 13;\n        var legendSpacing = 7;\n        \n        var donutTip = d3.select(\"body\").append(\"div\")\n            .attr(\"class\", \"donut-tip\")\n            .style(\"opacity\", 0);\n        \n        var path = svg.selectAll('path')\n            .data(pie(choosenSentiment.sentiment))\n            .enter()\n            .append('path')\n            .style(\"cursor\", \"pointer\")\n            .attr('d', arc)\n            .attr('fill', function (d, i) {\n                return color(d.data.title);\n            })\n            .attr('transform', 'translate(0, 0)')\n            .on('mouseover', function (d, i) {\n                /*\n                d3.select(this).transition()\n                    .duration('50')\n                    .attr('opacity', '.85');\n                donutTip.transition()\n                    .duration(50)\n                    .style(\"opacity\", 1);\n                let num = (Math.round((d.value / d.data.all) * 100)).toString() + '%';\n                donutTip.html(num)\n                    .style(\"left\", (d3.event.pageX + 10) + \"px\")\n                    .style(\"top\", (d3.event.pageY - 15) + \"px\");\n                */\n               d3.select('.value_text').remove()\n               svg.append('text')\n               .attr('class', 'value_text')\n               .attr('x', legendRectSize + legendSpacing)\n               .attr('y', legendRectSize - legendSpacing)\n               .attr('font-size', '15px')\n               .attr('text-anchor', 'middle')\n               .text(d.data.title+ ': '+Math.round(d.data.value)+' %')\n               .call(wrap)\n                console.log(choosenSentiment)\n\n        \n            })\n            .on('mouseout', function (d, i) {\n                d3.select(this).transition()\n                    .duration('50')\n                    .attr('opacity', '1');\n                donutTip.transition()\n                    .duration('50')\n                    .style(\"opacity\", 0);\n            });\n        \n        /*\n        var legend = svg.selectAll('.legend')\n            .data(color.domain())\n            .enter()\n            .append('g')\n            .attr('class', 'circle-legend')\n            .attr('transform', function (d, i) {\n                var height = legendRectSize + legendSpacing;\n                var offset = height * color.domain().length / 2;\n                var horz = -2 * legendRectSize - 13;\n                var vert = i * height - offset;\n                return 'translate(' + horz + ',' + vert + ')';\n            });\n        \n        legend.append('circle')\n            .style('fill', color)\n            .style('stroke', color)\n            .attr('cx', 0)\n            .attr('cy', 0)\n            .attr('r', '.5rem');\n        \n        legend.append('text')\n            .attr('x', legendRectSize + legendSpacing)\n            .attr('y', legendRectSize - legendSpacing)\n            .text(function (d) {\n                return d;\n            });\n        */\n        \n        function change(data) {\n            var pie = d3.pie()\n                .value(function (d) {\n                    return d.value;\n                }).sort(null)(data);\n        \n            var width = 360;\n            var height = 360;\n            var radius = Math.min(width, height) / 2;\n            var donutWidth = 75;\n        \n            path = d3.select(\"#donut\")\n                .selectAll(\"path\")\n                .data(pie); // Compute the new angles\n            var arc = d3.arc()\n                .innerRadius(radius - donutWidth)\n                .outerRadius(radius);\n            path.transition().duration(500).attr(\"d\", arc); // redrawing the path with a smooth transition\n        }\n\n        function wrap(text, width) {\n            text.each(function() {\n            var text = d3.select(this),\n            words = text.text().split(/\\s+/).reverse(),\n            word,\n            line = [],\n            lineNumber = 0,\n            lineHeight = 1.1, // ems\n            y = text.attr(\"y\"),\n            dy = parseFloat(text.attr(\"dy\")),\n            tspan = text.text(null).append(\"tspan\").attr(\"x\", 0).attr(\"y\", y).attr(\"dy\", dy + \"em\")\n            while (word = words.pop()) {\n                line.push(word)\n                tspan.text(line.join(\" \"))\n                if (tspan.node().getComputedTextLength() > width) {\n                    line.pop()\n                    tspan.text(line.join(\" \"))\n                    line = [word]\n                    tspan = text.append(\"tspan\").attr(\"x\", 0).attr(\"y\", y).attr(\"dy\", `${++lineNumber * lineHeight + dy}em`).text(word)\n                }\n            }\n            })\n        }\n        \n        \n\n    }) // close useeffect\n\n    return(\n      <>\n\n        <svg id='lineChart' width=\"200\" height=\"200\" ref={d3Container}></svg>\n        </>\n    )\n}\n\nexport default PieChart; \n"]},"metadata":{},"sourceType":"module"}