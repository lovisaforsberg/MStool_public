{"ast":null,"code":"var _jsxFileName = \"/Users/lovisaforsberg/MS_vis/ms_viz/src/components/textinsight.js\",\n    _s = $RefreshSig$();\n\nimport React, { useContext, useEffect, useRef, useReducer, useState, createContext } from \"react\";\nimport * as d3 from 'd3';\nimport '../../node_modules/@ibm/plex/css/ibm-plex.css';\nimport { SentimentContext } from '../App';\nimport '../style/textinsight.css'; //import Highlighter from \"react-highlight-words\";\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst TextInsight = () => {\n  _s();\n\n  const SentSentimentContext = useContext(SentimentContext);\n  const {\n    choosenSentiment,\n    setChoosenSentiment\n  } = SentSentimentContext;\n  /*\n  const findSentiment = (fullText) =>{\n      var text = ''\n      if (!(choosenSentiment.insight_pos == '-')) {\n          var index = 1\n          choosenSentiment.insight_pos.forEach(part => {\n              let split_index = fullText.toLowerCase().split(part.toLowerCase());\n              let ttt_index = \"\";\n           });\n      }\n  }\n   \n  const createHighlight = (text, part)=> {\n      // split the string at the point(s) where the search term is present.\n      let split = text.toLowerCase().split(searchTerm.toLowerCase());\n      // create a placeholder string.\n      let ttt = \"\";\n      // loop through the splited string and put in the search term after each one and wrap it in a span with a class 'highlight' unless it is the last one.\n      for (let i = 0; i < split.length; i++) {\n          if (i === split.length - 1) {\n              ttt += split[i];\n          } else {\n              ttt += `${split[i]} <span className=\"highlight\">${searchTerm}</span>`;\n          }\n      }\n      //return the string as HTML.\n      return ttt;\n  }*/\n  //console.log(createHighlight(choosenSentiment.insight_full))\n\n  var text = choosenSentiment.insight_full.replace(new RegExp('comments', 'the', \"gi\"), match => `<mark>${match}</mark>`);\n  useEffect(() => {}); // close useeffect\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      children: \"hejhej\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"textInsightContainer\",\n      dangerouslySetInnerHTML: {\n        __html: text\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n};\n\n_s(TextInsight, \"9+0oHuYyX1LDLM9fJobpPKa4Bzs=\");\n\n_c = TextInsight;\nexport default TextInsight;\n\nvar _c;\n\n$RefreshReg$(_c, \"TextInsight\");","map":{"version":3,"sources":["/Users/lovisaforsberg/MS_vis/ms_viz/src/components/textinsight.js"],"names":["React","useContext","useEffect","useRef","useReducer","useState","createContext","d3","SentimentContext","TextInsight","SentSentimentContext","choosenSentiment","setChoosenSentiment","text","insight_full","replace","RegExp","match","__html"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,UAAhB,EAA4BC,SAA5B,EAAuCC,MAAvC,EAA+CC,UAA/C,EAA2DC,QAA3D,EAAqEC,aAArE,QAA0F,OAA1F;AACA,OAAO,KAAKC,EAAZ,MAAoB,IAApB;AACA,OAAO,+CAAP;AACA,SAAQC,gBAAR,QAA+B,QAA/B;AACA,OAAO,0BAAP,C,CACA;;;;;AAKA,MAAMC,WAAW,GAAG,MAAK;AAAA;;AACrB,QAAMC,oBAAoB,GAAGT,UAAU,CAACO,gBAAD,CAAvC;AACA,QAAM;AAACG,IAAAA,gBAAD;AAAmBC,IAAAA;AAAnB,MAA0CF,oBAAhD;AAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAII;;AAEA,MAAIG,IAAI,GAAGF,gBAAgB,CAACG,YAAjB,CAA8BC,OAA9B,CAAsC,IAAIC,MAAJ,CAAW,UAAX,EAAsB,KAAtB,EAA6B,IAA7B,CAAtC,EAA2EC,KAAD,IAAY,SAAQA,KAAM,SAApG,CAAX;AAEAf,EAAAA,SAAS,CAAC,MAAI,CAEb,CAFQ,CAAT,CAvCqB,CAyClB;;AAEH,sBACI;AAAA,4BACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADA,eAEA;AAAK,MAAA,SAAS,EAAC,sBAAf;AAAsC,MAAA,uBAAuB,EACxD;AAACgB,QAAAA,MAAM,EAACL;AAAR;AADL;AAAA;AAAA;AAAA;AAAA,YAFA;AAAA,kBADJ;AAQH,CAnDD;;GAAMJ,W;;KAAAA,W;AAqDN,eAAeA,WAAf","sourcesContent":["import React, { useContext, useEffect, useRef, useReducer, useState, createContext } from \"react\";\nimport * as d3 from 'd3'\nimport '../../node_modules/@ibm/plex/css/ibm-plex.css';\nimport {SentimentContext} from '../App'\nimport '../style/textinsight.css'\n//import Highlighter from \"react-highlight-words\";\n\n\n\n\nconst TextInsight = () =>{\n    const SentSentimentContext = useContext(SentimentContext);\n    const {choosenSentiment, setChoosenSentiment} = SentSentimentContext\n\n    /*\n    const findSentiment = (fullText) =>{\n        var text = ''\n        if (!(choosenSentiment.insight_pos == '-')) {\n            var index = 1\n            choosenSentiment.insight_pos.forEach(part => {\n                let split_index = fullText.toLowerCase().split(part.toLowerCase());\n                let ttt_index = \"\";\n\n            });\n        }\n    }\n\n    \n    const createHighlight = (text, part)=> {\n        // split the string at the point(s) where the search term is present.\n        let split = text.toLowerCase().split(searchTerm.toLowerCase());\n        // create a placeholder string.\n        let ttt = \"\";\n        // loop through the splited string and put in the search term after each one and wrap it in a span with a class 'highlight' unless it is the last one.\n        for (let i = 0; i < split.length; i++) {\n            if (i === split.length - 1) {\n                ttt += split[i];\n            } else {\n                ttt += `${split[i]} <span className=\"highlight\">${searchTerm}</span>`;\n            }\n        }\n        //return the string as HTML.\n        return ttt;\n    }*/\n\n    //console.log(createHighlight(choosenSentiment.insight_full))\n\n    var text = choosenSentiment.insight_full.replace(new RegExp('comments','the', \"gi\"), (match) => `<mark>${match}</mark>`)\n\n    useEffect(()=>{\n\n    }) // close useeffect\n\n    return(\n        <>\n        <button>hejhej</button>\n        <div className='textInsightContainer' dangerouslySetInnerHTML=\n            {{__html:text}}/>\n\n        </>\n    )\n}\n\nexport default TextInsight;"]},"metadata":{},"sourceType":"module"}