{"ast":null,"code":"var _jsxFileName = \"/Users/lovisaforsberg/MS_vis/ms_viz/src/components/textinsight.js\",\n    _s = $RefreshSig$();\n\nimport React, { useContext, useEffect, useRef, useReducer, useState, createContext } from \"react\";\nimport * as d3 from 'd3';\nimport '../../node_modules/@ibm/plex/css/ibm-plex.css';\nimport { SentimentContext } from '../App';\nimport { HoverSentContext } from './graphContainer';\nimport '../style/textinsight.css'; //import Highlighter from \"react-highlight-words\";\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst TextInsight = () => {\n  _s();\n\n  const SentSentimentContext = useContext(SentimentContext);\n  const {\n    choosenSentiment,\n    setChoosenSentiment\n  } = SentSentimentContext;\n  const SentHoverSentContext = useContext(HoverSentContext);\n  const {\n    hoverSent,\n    setHoverSent\n  } = SentHoverSentContext;\n  const [highlight, setHighlight] = useState(''); //const [img, setImg] = useState(require('(../images/'+choosenSentiment.img+'.png)'))\n\n  var img = require('../images/cobweb.png');\n\n  let text = choosenSentiment.insight_full;\n\n  const createHighlight = () => {\n    if (!(insight === '-')) {\n      for (var i = 0; i < insight.length; i++) {\n        text = text.replace(insight[i], match => `<mark class=\"highlight_${sentiment}\">${match}</mark>`);\n      }\n    } else {}\n  };\n\n  if (hoverSent === 'Positive') {\n    var sentiment = 'pos';\n    var insight = choosenSentiment.insight_pos;\n    createHighlight();\n  }\n\n  if (hoverSent === 'Negative') {\n    var sentiment = 'neg';\n    var insight = choosenSentiment.insight_neg;\n    createHighlight();\n  }\n\n  if (hoverSent === 'Neutral') {\n    var sentiment = 'neu';\n    var insight = choosenSentiment.insight_neu;\n    createHighlight();\n  }\n\n  if (hoverSent === 'eng') {\n    var sentiment = 'eng';\n    var insight = choosenSentiment.insight_eng;\n    createHighlight();\n  } //console.log(createHighlight(choosenSentiment.insight_full))\n  //var replaced = choosenSentiment.insight_full.replace(/[^(\\w\\s]/gi, '')\n  //console.log(replaced)\n  //var text = choosenSentiment.insight_full.replace(/elevant neutral sentiment/g, (match) => `<mark class=\"highlight_${sentiment}\">${match}</mark>`)\n  //console.log(text)\n\n\n  useEffect(() => {}); // close useeffect\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"textInsightContainer\",\n      dangerouslySetInnerHTML: {\n        __html: text\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n      src: img\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n\n_s(TextInsight, \"ogaZGjbdBHEK9nIyjTZkJfD4luQ=\");\n\n_c = TextInsight;\nexport default TextInsight;\n\nvar _c;\n\n$RefreshReg$(_c, \"TextInsight\");","map":{"version":3,"sources":["/Users/lovisaforsberg/MS_vis/ms_viz/src/components/textinsight.js"],"names":["React","useContext","useEffect","useRef","useReducer","useState","createContext","d3","SentimentContext","HoverSentContext","TextInsight","SentSentimentContext","choosenSentiment","setChoosenSentiment","SentHoverSentContext","hoverSent","setHoverSent","highlight","setHighlight","img","require","text","insight_full","createHighlight","insight","i","length","replace","match","sentiment","insight_pos","insight_neg","insight_neu","insight_eng","__html"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,UAAhB,EAA4BC,SAA5B,EAAuCC,MAAvC,EAA+CC,UAA/C,EAA2DC,QAA3D,EAAqEC,aAArE,QAA0F,OAA1F;AACA,OAAO,KAAKC,EAAZ,MAAoB,IAApB;AACA,OAAO,+CAAP;AACA,SAAQC,gBAAR,QAA+B,QAA/B;AACA,SAAQC,gBAAR,QAA+B,kBAA/B;AACA,OAAO,0BAAP,C,CACA;;;;;AAEA,MAAMC,WAAW,GAAG,MAAK;AAAA;;AACrB,QAAMC,oBAAoB,GAAGV,UAAU,CAACO,gBAAD,CAAvC;AACA,QAAM;AAACI,IAAAA,gBAAD;AAAmBC,IAAAA;AAAnB,MAA0CF,oBAAhD;AAEA,QAAMG,oBAAoB,GAAGb,UAAU,CAACQ,gBAAD,CAAvC;AACA,QAAM;AAACM,IAAAA,SAAD;AAAYC,IAAAA;AAAZ,MAA4BF,oBAAlC;AAEA,QAAM,CAACG,SAAD,EAAYC,YAAZ,IAA4Bb,QAAQ,CAAC,EAAD,CAA1C,CAPqB,CASrB;;AACA,MAAIc,GAAG,GAAGC,OAAO,CAAC,sBAAD,CAAjB;;AAEA,MAAIC,IAAI,GAAGT,gBAAgB,CAACU,YAA5B;;AACA,QAAMC,eAAe,GAAG,MAAK;AACzB,QAAG,EAAEC,OAAO,KAAK,GAAd,CAAH,EAAsB;AACnB,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAID,OAAD,CAAUE,MAA9B,EAAsCD,CAAC,EAAvC,EAA2C;AAC1CJ,QAAAA,IAAI,GAAGA,IAAI,CAACM,OAAL,CAAaH,OAAO,CAACC,CAAD,CAApB,EAA0BG,KAAD,IAAY,0BAAyBC,SAAU,KAAID,KAAM,SAAlF,CAAP;AACC;AACJ,KAJD,MAKI,CACH;AACJ,GARD;;AAUA,MAAGb,SAAS,KAAK,UAAjB,EAA4B;AACxB,QAAIc,SAAS,GAAG,KAAhB;AACA,QAAIL,OAAO,GAAGZ,gBAAgB,CAACkB,WAA/B;AACAP,IAAAA,eAAe;AAClB;;AACD,MAAGR,SAAS,KAAK,UAAjB,EAA4B;AACxB,QAAIc,SAAS,GAAG,KAAhB;AACA,QAAIL,OAAO,GAAGZ,gBAAgB,CAACmB,WAA/B;AACAR,IAAAA,eAAe;AAClB;;AACD,MAAGR,SAAS,KAAK,SAAjB,EAA2B;AACvB,QAAIc,SAAS,GAAG,KAAhB;AACA,QAAIL,OAAO,GAAGZ,gBAAgB,CAACoB,WAA/B;AACAT,IAAAA,eAAe;AAClB;;AACD,MAAGR,SAAS,KAAK,KAAjB,EAAuB;AACnB,QAAIc,SAAS,GAAG,KAAhB;AACA,QAAIL,OAAO,GAAGZ,gBAAgB,CAACqB,WAA/B;AACAV,IAAAA,eAAe;AAClB,GA1CoB,CA8CrB;AAEA;AACA;AAEA;AACA;;;AACArB,EAAAA,SAAS,CAAC,MAAI,CAEb,CAFQ,CAAT,CArDqB,CAuDlB;;AAEH,sBACI;AAAA,4BACI;AAAK,MAAA,SAAS,EAAC,sBAAf;AAAsC,MAAA,uBAAuB,EAC5D;AAACgC,QAAAA,MAAM,EAACb;AAAR;AADD;AAAA;AAAA;AAAA;AAAA,YADJ,eAGI;AAAK,MAAA,GAAG,EAAEF;AAAV;AAAA;AAAA;AAAA;AAAA,YAHJ;AAAA,kBADJ;AAQH,CAjED;;GAAMT,W;;KAAAA,W;AAmEN,eAAeA,WAAf","sourcesContent":["import React, { useContext, useEffect, useRef, useReducer, useState, createContext } from \"react\";\nimport * as d3 from 'd3'\nimport '../../node_modules/@ibm/plex/css/ibm-plex.css';\nimport {SentimentContext} from '../App'\nimport {HoverSentContext} from './graphContainer'\nimport '../style/textinsight.css'\n//import Highlighter from \"react-highlight-words\";\n\nconst TextInsight = () =>{\n    const SentSentimentContext = useContext(SentimentContext);\n    const {choosenSentiment, setChoosenSentiment} = SentSentimentContext\n\n    const SentHoverSentContext = useContext(HoverSentContext)\n    const {hoverSent, setHoverSent} = SentHoverSentContext\n\n    const [highlight, setHighlight] = useState('')\n\n    //const [img, setImg] = useState(require('(../images/'+choosenSentiment.img+'.png)'))\n    var img = require('../images/cobweb.png')\n\n    let text = choosenSentiment.insight_full\n    const createHighlight = () =>{\n        if(!(insight === '-')){\n           for (var i = 0; i < (insight).length; i++ ){\n            text = text.replace(insight[i], (match) => `<mark class=\"highlight_${sentiment}\">${match}</mark>`)\n            } \n        }\n        else{\n        }  \n    }\n\n    if(hoverSent === 'Positive'){\n        var sentiment = 'pos'\n        var insight = choosenSentiment.insight_pos\n        createHighlight()\n    }\n    if(hoverSent === 'Negative'){\n        var sentiment = 'neg'\n        var insight = choosenSentiment.insight_neg\n        createHighlight()\n    }\n    if(hoverSent === 'Neutral'){\n        var sentiment = 'neu'\n        var insight = choosenSentiment.insight_neu\n        createHighlight()\n    }\n    if(hoverSent === 'eng'){\n        var sentiment = 'eng'\n        var insight = choosenSentiment.insight_eng\n        createHighlight()\n    }\n\n\n\n    //console.log(createHighlight(choosenSentiment.insight_full))\n\n    //var replaced = choosenSentiment.insight_full.replace(/[^(\\w\\s]/gi, '')\n    //console.log(replaced)\n\n    //var text = choosenSentiment.insight_full.replace(/elevant neutral sentiment/g, (match) => `<mark class=\"highlight_${sentiment}\">${match}</mark>`)\n    //console.log(text)\n    useEffect(()=>{\n\n    }) // close useeffect\n\n    return(\n        <>\n            <div className='textInsightContainer' dangerouslySetInnerHTML=\n            {{__html:text}}/>\n            <img src={img}/>\n\n        </>\n    )\n}\n\nexport default TextInsight;"]},"metadata":{},"sourceType":"module"}