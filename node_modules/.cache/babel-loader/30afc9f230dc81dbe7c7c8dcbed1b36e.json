{"ast":null,"code":"var _jsxFileName = \"/Users/lovisaforsberg/MS_vis/ms_viz/src/components/textinsight.js\",\n    _s = $RefreshSig$();\n\nimport React, { useContext, useEffect, useRef, useReducer, useState, createContext } from \"react\";\nimport * as d3 from 'd3';\nimport '../../node_modules/@ibm/plex/css/ibm-plex.css';\nimport { SentimentContext } from '../App';\nimport '../style/textinsight.css'; //import Highlighter from \"react-highlight-words\";\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst TextInsight = () => {\n  _s();\n\n  const SentSentimentContext = useContext(SentimentContext);\n  const {\n    choosenSentiment,\n    setChoosenSentiment\n  } = SentSentimentContext;\n  var sentiment = 'pos';\n\n  const createHighlight = () => {\n    if (!(choosenSentiment.insight_pos === '-')) {\n      var text = choosenSentiment.insight_pos;\n\n      for (var i = 0; i < choosenSentiment.insight_pos.length; i++) {\n        console.log(choosenSentiment.insight_pos[i]);\n        var text = choosenSentiment.insight_full.replace(choosenSentiment.insight_pos[i], match => `<mark class=\"highlight_${sentiment}\">${match}</mark>`);\n        console.log(text);\n      }\n    } else {\n      console.log('fel');\n    }\n  };\n\n  createHighlight(); //console.log(createHighlight(choosenSentiment.insight_full))\n  //var replaced = choosenSentiment.insight_full.replace(/[^(\\w\\s]/gi, '')\n  //console.log(replaced)\n  //var text = choosenSentiment.insight_full.replace(/elevant neutral sentiment/g, (match) => `<mark class=\"highlight_${sentiment}\">${match}</mark>`)\n  //console.log(text)\n\n  useEffect(() => {}); // close useeffect\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"button\", {\n      children: \"hejhej\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 9\n    }, this)\n  }, void 0, false);\n};\n\n_s(TextInsight, \"9+0oHuYyX1LDLM9fJobpPKa4Bzs=\");\n\n_c = TextInsight;\nexport default TextInsight;\n\nvar _c;\n\n$RefreshReg$(_c, \"TextInsight\");","map":{"version":3,"sources":["/Users/lovisaforsberg/MS_vis/ms_viz/src/components/textinsight.js"],"names":["React","useContext","useEffect","useRef","useReducer","useState","createContext","d3","SentimentContext","TextInsight","SentSentimentContext","choosenSentiment","setChoosenSentiment","sentiment","createHighlight","insight_pos","text","i","length","console","log","insight_full","replace","match"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,UAAhB,EAA4BC,SAA5B,EAAuCC,MAAvC,EAA+CC,UAA/C,EAA2DC,QAA3D,EAAqEC,aAArE,QAA0F,OAA1F;AACA,OAAO,KAAKC,EAAZ,MAAoB,IAApB;AACA,OAAO,+CAAP;AACA,SAAQC,gBAAR,QAA+B,QAA/B;AACA,OAAO,0BAAP,C,CACA;;;;;AAIA,MAAMC,WAAW,GAAG,MAAK;AAAA;;AACrB,QAAMC,oBAAoB,GAAGT,UAAU,CAACO,gBAAD,CAAvC;AACA,QAAM;AAACG,IAAAA,gBAAD;AAAmBC,IAAAA;AAAnB,MAA0CF,oBAAhD;AAEA,MAAIG,SAAS,GAAG,KAAhB;;AAEA,QAAMC,eAAe,GAAG,MAAK;AACzB,QAAG,EAAEH,gBAAgB,CAACI,WAAjB,KAAiC,GAAnC,CAAH,EAA2C;AAC3C,UAAIC,IAAI,GAAGL,gBAAgB,CAACI,WAA5B;;AACG,WAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAIN,gBAAgB,CAACI,WAAlB,CAA+BG,MAAnD,EAA2DD,CAAC,EAA5D,EAAgE;AAC/DE,QAAAA,OAAO,CAACC,GAAR,CAAYT,gBAAgB,CAACI,WAAjB,CAA6BE,CAA7B,CAAZ;AACA,YAAID,IAAI,GAAGL,gBAAgB,CAACU,YAAjB,CAA8BC,OAA9B,CAAsCX,gBAAgB,CAACI,WAAjB,CAA6BE,CAA7B,CAAtC,EAAwEM,KAAD,IAAY,0BAAyBV,SAAU,KAAIU,KAAM,SAAhI,CAAX;AACAJ,QAAAA,OAAO,CAACC,GAAR,CAAYJ,IAAZ;AACH;AACA,KAPD,MAQI;AACAG,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAZ;AACH;AAGJ,GAdD;;AAgBAN,EAAAA,eAAe,GAtBM,CAuBrB;AAEA;AACA;AAEA;AACA;;AACAZ,EAAAA,SAAS,CAAC,MAAI,CAEb,CAFQ,CAAT,CA9BqB,CAgClB;;AAEH,sBACI;AAAA,2BACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA,mBADJ;AAQH,CA1CD;;GAAMO,W;;KAAAA,W;AA4CN,eAAeA,WAAf","sourcesContent":["import React, { useContext, useEffect, useRef, useReducer, useState, createContext } from \"react\";\nimport * as d3 from 'd3'\nimport '../../node_modules/@ibm/plex/css/ibm-plex.css';\nimport {SentimentContext} from '../App'\nimport '../style/textinsight.css'\n//import Highlighter from \"react-highlight-words\";\n\n\n\nconst TextInsight = () =>{\n    const SentSentimentContext = useContext(SentimentContext);\n    const {choosenSentiment, setChoosenSentiment} = SentSentimentContext\n\n    var sentiment = 'pos'\n\n    const createHighlight = () =>{\n        if(!(choosenSentiment.insight_pos === '-')){\n        var text = choosenSentiment.insight_pos\n           for (var i = 0; i < (choosenSentiment.insight_pos).length; i++ ){\n            console.log(choosenSentiment.insight_pos[i])\n            var text = choosenSentiment.insight_full.replace(choosenSentiment.insight_pos[i], (match) => `<mark class=\"highlight_${sentiment}\">${match}</mark>`)\n            console.log(text)\n        } \n        }\n        else{\n            console.log('fel')\n        }\n        \n        \n    }\n\n    createHighlight()\n    //console.log(createHighlight(choosenSentiment.insight_full))\n\n    //var replaced = choosenSentiment.insight_full.replace(/[^(\\w\\s]/gi, '')\n    //console.log(replaced)\n\n    //var text = choosenSentiment.insight_full.replace(/elevant neutral sentiment/g, (match) => `<mark class=\"highlight_${sentiment}\">${match}</mark>`)\n    //console.log(text)\n    useEffect(()=>{\n\n    }) // close useeffect\n\n    return(\n        <>\n        <button>hejhej</button>\n       {/* <div className='textInsightContainer' dangerouslySetInnerHTML=\n            {{__html:text}}/>*/}\n\n        </>\n    )\n}\n\nexport default TextInsight;"]},"metadata":{},"sourceType":"module"}