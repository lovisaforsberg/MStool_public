{"ast":null,"code":"var _jsxFileName = \"/Users/lovisaforsberg/MS_vis/ms_viz/src/components/netsentiment.js\",\n    _s = $RefreshSig$();\n\nimport React, { useContext, useEffect, useRef, useReducer, useState, createContext } from \"react\";\nimport * as d3 from 'd3';\nimport { SentimentContext } from '../App';\nimport { HoverContext } from '../App';\nimport '../style/netsentiment.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst NetSentiment = () => {\n  _s();\n\n  const SentSentimentContext = useContext(SentimentContext);\n  const {\n    choosenSentiment,\n    setChoosenSentiment\n  } = SentSentimentContext;\n  var post_data = [];\n\n  const handleData = data => {\n    if (!('children' in data)) {\n      post_data.push({\n        value: (data.pos - data.neg) * data.comments,\n        name: data.name\n      });\n    } else {\n      data.children.forEach(child => {\n        handleData(child);\n      });\n    }\n  };\n\n  handleData(choosenSentiment);\n  console.log(post_data);\n  const d3Container = useRef(null);\n  useEffect(() => {\n    d3.select(\".root_netsentiment\").selectAll('*').remove();\n    var margin = {\n      top: 30,\n      right: 10,\n      bottom: 10,\n      left: 30\n    },\n        width = 960 - margin.left - margin.right,\n        height = 500 - margin.top - margin.bottom;\n    /*\n    var y0 = Math.max(Math.abs(d3.min(post_data.map(function (d) {return d.value}))), \n                    Math.abs(d3.max(post_data.map(function (d) {return d.value}))));\n    \n    \n    var y = d3.scaleLinear()\n        .domain([-y0, y0])\n        .range([height,0])\n        .nice();\n    \n    var x = d3.scaleBand()\n        .domain(post_data.map(function (d) {return d.name}))\n        .rangeRound([0, width])\n    \n    var yAxis = d3.axisLeft(y)\n    */\n\n    var values = post_data.map(function (d) {\n      return d.value;\n    });\n    var keys = post_data.map(function (d) {\n      return d.name;\n    });\n    var maxHeight = d3.max(values);\n    var minHeight = d3.min(values); //set y scale\n\n    var yScale = d3.scaleLinear().rangeRound([0, height]).domain([maxHeight, -maxHeight]); //show negative\n    //add x axis\n\n    var xScale = d3.scaleBand().rangeRound([0, width]).padding(0.05); //scaleBand is used for  bar chart\n\n    xScale.domain(keys); //if domain is specified, sets the domain to the specified array of values. \n    //The first element in domain will be mapped to the first band, \n    //the second domain value to the second band, and so on. \n    //Domain values are stored internally in a map from stringified value to index; \n    //the resulting index is then used to determine the band. \n    //Thus, a band scaleâ€™s values must be coercible to a string, \n    //and the stringified version of the domain value uniquely identifies the corresponding band. \n    //If domain is not specified, this method returns the current domain.\n\n    var svg = d3.select(d3Container.current).attr('class', 'root_netsentiment').append(\"svg\").attr(\"width\", width + margin.left + margin.right).attr(\"height\", height + margin.top + margin.bottom).append(\"g\") //add group to leave margin for axis\n    .attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\");\n    var barpadding = 2;\n    var bars = svg.selectAll(\"rect\").data(post_data).enter().append(\"rect\");\n    bars.attr(\"x\", function (d, i) {\n      return xScale(d.name);\n    }).attr(\"y\", function (d) {\n      if (d.value < 0) {\n        return height / 2;\n      } else {\n        return yScale(d.value);\n      }\n    }) //for bottom to top\n    .attr(\"width\", xScale.bandwidth()\n    /*width/dataset.length-barpadding*/\n    ).attr(\"height\", function (d) {\n      return height / 2 - yScale(Math.abs(d.value));\n    });\n    bars.attr(\"fill\", function (d) {\n      if (d.value >= 0) {\n        return \"green\";\n      } else {\n        return \"orange\";\n      }\n    }); //add tag to every bar\n\n    var tags = svg.selectAll(\"text\").data(post_data).enter().append(\"text\").text(function (d) {\n      return d.name;\n    });\n    tags.attr(\"x\", function (d, i) {\n      return xScale(d.name) + 8;\n    }).attr(\"y\", function (d) {\n      if (d.value >= 0) {\n        return yScale(d.value) + 12;\n      } else {\n        return height - yScale(Math.abs(d.value)) - 2;\n      }\n    }) //for bottom to top\n    .attr(\"fill\", \"white\"); //add x and y axis\n\n    var yAxis = d3.axisLeft(yScale);\n    svg.append(\"g\").call(yAxis);\n    var xAxis = d3.axisBottom(xScale);\n    /*.tickFormat(\"\");remove tick label*/\n\n    svg.append(\"g\").call(xAxis).attr(\"transform\", \"translate(0,\" + height / 2 + \")\"); //add label for x axis and y axis\n\n    svg.append(\"text\").text(\"Y Label\").attr(\"x\", 0 - height / 2).attr(\"y\", 0 - margin.left).attr(\"dy\", \"1em\").style(\"text-anchor\", \"middle\").attr(\"transform\", \"rotate(-90)\");\n    svg.append(\"text\").text(\"X Label\").attr(\"x\", width / 2).attr(\"y\", height + margin.bottom).style(\"text-anchor\", \"middle\");\n    /*\n     var margin = {top: 20, right: 40, bottom: 60, left: 40},\n     width = 500 - margin.left - margin.right,\n     height = 250 - margin.top - margin.bottom;\n      var divTooltip = d3\n         .select('body')\n         .append('div')\n         .attr('class', 'toolTip')\n         .attr('font-size', '100px')\n      var x = d3.scaleBand()\n         .domain(d3.extent(post_data, function (d) {return d.value;}))\n         .rangeRound([0, width])\n         .padding(0.4);\n       var y = d3.scaleLinear()\n         .range([height, 0])\n         .domain(post_data.map(function (d) {return d.name}));\n      var xAxis = d3.axisBottom(x)\n     .ticks(5);\n      var yAxis = d3.axisLeft(y)\n     .tickFormat(function(d) { return parseInt(d) });\n      var svg = d3.select(d3Container.current)\n     .attr('class', 'root_netsentiment')\n     .append(\"svg\")\n     .attr(\"width\", width + margin.left + margin.right)\n     .attr(\"height\", height + margin.top + margin.bottom)\n     .append(\"g\")\n     .attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\");\n      // Ticks on x-axis and y-axis\n     svg.append(\"g\")\n     .attr(\"class\", \"x axis\")\n     .attr(\"transform\", \"translate(0,\" + height/2 + \")\")\n     .call(xAxis)\n     .selectAll(\"text\")\n     .style(\"text-anchor\", \"end\")\n     .attr(\"dx\", \"1.2em\")\n     .attr(\"dy\", \"1em\")\n     .attr('overflow', 'visible')\n     .attr(\"transform\", \"rotate(-20)\")\n     .attr('fill', '#4d4d4d')\n      svg.append(\"g\")\n     .attr(\"class\", \"y axis\")\n     .call(yAxis)\n     .append(\"text\")\n     .attr(\"transform\", \"rotate(-90)\")\n     .attr(\"y\", 6)\n     .attr(\"dy\", \".71em\")\n     .style(\"text-anchor\", \"end\")\n     .style(\"fill\", \"#005282\")\n     .text(\"Engagement\");\n      var graph = svg.selectAll(\".date\")\n     .attr('class', 'graph')\n     .data(post_data)\n     //.enter()\n     //.append(\"g\")\n     .join('g')\n     .attr(\"class\", \"g\")\n     .attr(\"transform\", function(d) { return \"translate(\" + x(d.name) + \",0)\"; });\n      graph.selectAll(\"rect\")\n     .data(function(d){return d.values})\n     .join('rect')\n     .attr(\"width\", x.bandwidth())\n     .attr(\"x\", function(d) { return x(d.name); })\n     .attr(\"y\", function(d) { return y(d.value)})\n     //.attr(\"height\", function(d) { return height - (d.yscale==0 ? y(d.value) : y1(d.value)); })\n        .style(\"fill\", function(d) { return d.value > 0 ? '#63A37B' : 'rgb(241, 86, 69)'})\n     .style(\"cursor\", \"pointer\")\n      */\n\n    /*\n    var margin = {top: 30, right: 10, bottom: 50, left: 50},\n    width = 150,\n    height = 150;\n       var data = [{value: 10, dataset:\"barbaz\"},\n    {value: 40, dataset:\"barbar\"},\n    {value: -10, dataset:\"foobaz\"},\n    {value: 50, dataset:\"foobar\"},\n    ];\n     // Add svg to\n    var svg = d3.select(d3Container.current)\n    .attr('class', 'root_netsentiment')\n    .append('svg')\n    .attr('width', width + margin.left + margin.right)\n    .attr('height', height + margin.top + margin.bottom)\n    .append('g')\n    .attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n     // set the ranges\n    var y = d3.scaleBand()\n        .range([height, 0])\n        .padding(0.1);\n     var x = d3.scaleLinear()\n        //.range([0, width])\n        .rangeRound([margin.left, width - margin.right])\n     // Scale the range of the data in the domains\n    x.domain(d3.extent(post_data, function (d) {return d.value;}));\n    \n    y.domain(post_data.map(function (d) {\n        return d.name;\n    }));\n     var xAxis = d3.axisBottom(x)\n    .ticks(5)\n     var yAxis = d3.axisRight(y)\n     // append the rectangles for the bar chart\n    svg.selectAll(\".bar\")\n        .data(post_data)\n        .enter().append(\"rect\")\n        .attr(\"class\", function (d) {\n            return \"bar bar--\" + (d.value < 0 ? \"negative\" : \"positive\");\n        })\n        .attr(\"x\", function (d) {\n            return x(Math.min(0, d.value));\n        })\n        .attr(\"y\", function (d) {\n            return y(d.name);\n        })\n        .attr(\"width\", function (d) {\n            return Math.abs(x(d.value) - x(0));\n        })\n        .attr(\"height\", y.bandwidth());\n     // add the x Axis\n    svg.append(\"g\")\n        .attr(\"class\", \"x axis\")\n        .attr(\"transform\", \"translate(0,\" + height + \")\")\n        .call(xAxis)\n        .selectAll(\".x.axis text\")\n        .style(\"fill\",\"#4d4d4d\")\n     // add the y Axis\n    svg.append(\"g\")\n        .attr(\"class\", \"y axis\")\n        .attr(\"transform\", \"translate(\" + x(0) + \",0)\")\n        .call(yAxis)\n        .selectAll(\".y.axis text\")\n        .style(\"fill\",\"#4d4d4d\")\n    */\n  }); // close useeffect\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"svg\", {\n      id: \"netSentiment\",\n      width: 500,\n      height: 300,\n      ref: d3Container\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 310,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n};\n\n_s(NetSentiment, \"14ZIpd5j6XXI4XNvkUCoJ/lJoUc=\");\n\n_c = NetSentiment;\nexport default NetSentiment;\n\nvar _c;\n\n$RefreshReg$(_c, \"NetSentiment\");","map":{"version":3,"sources":["/Users/lovisaforsberg/MS_vis/ms_viz/src/components/netsentiment.js"],"names":["React","useContext","useEffect","useRef","useReducer","useState","createContext","d3","SentimentContext","HoverContext","NetSentiment","SentSentimentContext","choosenSentiment","setChoosenSentiment","post_data","handleData","data","push","value","pos","neg","comments","name","children","forEach","child","console","log","d3Container","select","selectAll","remove","margin","top","right","bottom","left","width","height","values","map","d","keys","maxHeight","max","minHeight","min","yScale","scaleLinear","rangeRound","domain","xScale","scaleBand","padding","svg","current","attr","append","barpadding","bars","enter","i","bandwidth","Math","abs","tags","text","yAxis","axisLeft","call","xAxis","axisBottom","style"],"mappings":"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ACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAeQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAaK,GAjRQ,CAAT,CAzBsB,CA0SnB;;AAEH,sBACI;AAAA,2BACI;AAAK,MAAA,EAAE,EAAC,cAAR;AAAuB,MAAA,KAAK,EAAE,GAA9B;AAAmC,MAAA,MAAM,EAAE,GAA3C;AAAgD,MAAA,GAAG,EAAE5C;AAArD;AAAA;AAAA;AAAA;AAAA;AADJ,mBADJ;AAMH,CAlTD;;GAAMlB,Y;;KAAAA,Y;AAoTN,eAAeA,YAAf","sourcesContent":["import React, { useContext, useEffect, useRef, useReducer, useState, createContext } from \"react\";\nimport * as d3 from 'd3'\nimport {SentimentContext} from '../App'\nimport {HoverContext} from '../App'\nimport '../style/netsentiment.css'\n\n\nconst NetSentiment = () =>{\n\n    const SentSentimentContext = useContext(SentimentContext);\n    const {choosenSentiment, setChoosenSentiment} = SentSentimentContext\n\n\n    var post_data = []\n    const handleData = (data) =>{\n        if (!('children' in data)){\n            post_data.push({\n                value: (data.pos-data.neg)*data.comments, name:data.name\n            })\n        }\n        else{\n            data.children.forEach(child =>{\n                handleData(child)\n            })\n        }\n    }\n\n    handleData(choosenSentiment)\n    console.log(post_data)\n\n    const d3Container = useRef(null)\n\n    useEffect(()=>{\n\n        d3.select(\".root_netsentiment\").selectAll('*').remove()\n\n        var margin = {top: 30, right: 10, bottom: 10, left: 30},\n    width = 960 - margin.left - margin.right,\n    height = 500 - margin.top - margin.bottom;\n/*\nvar y0 = Math.max(Math.abs(d3.min(post_data.map(function (d) {return d.value}))), \n                Math.abs(d3.max(post_data.map(function (d) {return d.value}))));\n\n\nvar y = d3.scaleLinear()\n    .domain([-y0, y0])\n    .range([height,0])\n    .nice();\n\nvar x = d3.scaleBand()\n    .domain(post_data.map(function (d) {return d.name}))\n    .rangeRound([0, width])\n\nvar yAxis = d3.axisLeft(y)\n*/\n    var values = post_data.map(function (d) {return d.value})\n    var keys = post_data.map(function (d) {return d.name})\n    \n    var maxHeight=d3.max(values);\n\tvar minHeight=d3.min(values)  \n    \n    //set y scale\n\tvar yScale = d3.scaleLinear().rangeRound([0,height]).domain([maxHeight,-maxHeight]);//show negative\n\t//add x axis\n\tvar xScale = d3.scaleBand()\n    .rangeRound([0,width])\n    .padding(0.05);//scaleBand is used for  bar chart\n\txScale.domain(keys)\n\t//if domain is specified, sets the domain to the specified array of values. \n    //The first element in domain will be mapped to the first band, \n    //the second domain value to the second band, and so on. \n    //Domain values are stored internally in a map from stringified value to index; \n    //the resulting index is then used to determine the band. \n    //Thus, a band scaleâ€™s values must be coercible to a string, \n    //and the stringified version of the domain value uniquely identifies the corresponding band. \n    //If domain is not specified, this method returns the current domain.\n\n    var svg = d3.select(d3Container.current)\n                .attr('class', 'root_netsentiment')\n                .append(\"svg\")\n\t\t\t\t.attr(\"width\",width+margin.left+margin.right)\n\t\t\t\t.attr(\"height\",height+margin.top+margin.bottom)\n\t\t\t\t.append(\"g\")  //add group to leave margin for axis\n\t\t\t\t.attr(\"transform\",\"translate(\"+margin.left+\",\"+margin.top+\")\");\n\n    var barpadding = 2;\n    var bars = svg.selectAll(\"rect\")\n        .data(post_data)\n        .enter()\n        .append(\"rect\");\n    \n    bars\n    .attr(\"x\",function(d,i){return xScale(d.name);})\n    .attr(\"y\",function(d){if(d.value<0){return height/2;}\n                    else{return yScale(d.value);}\n                    })//for bottom to top\n    .attr(\"width\", xScale.bandwidth()/*width/dataset.length-barpadding*/)\n    .attr(\"height\", function(d){return height/2 -yScale(Math.abs(d.value));});\n                \n    bars.attr(\"fill\",function(d){\n                    if(d.value>=0){\n                        return \"green\";\n                    }\n                    else{\n                        return \"orange\";\n                    }\n                });\n\n                //add tag to every bar\n\tvar tags = svg.selectAll(\"text\").data(post_data).enter().append(\"text\").text(function(d){\n\t\treturn d.name;\n\t});\n\ttags.attr(\"x\",function(d,i){\n\t\t\t  return xScale(d.name)+8;\n\t\t\t  })\n\t.attr(\"y\",function(d){\n\t\tif(d.value>=0){\n\t\t\treturn yScale(d.value)+12;\n\t\t}\n\t\telse{\n\t\t\treturn height-yScale(Math.abs(d.value))-2;\n\t\t}\n\t})//for bottom to top\n\t.attr(\"fill\",\"white\");\n\t\n\t//add x and y axis\n\tvar yAxis = d3.axisLeft(yScale);\n\tsvg.append(\"g\").call(yAxis);\n\t\n\n\tvar xAxis = d3.axisBottom(xScale);/*.tickFormat(\"\");remove tick label*/\n\tsvg.append(\"g\").call(xAxis).attr(\"transform\", \"translate(0,\"+height/2+\")\");\n\t\n\t//add label for x axis and y axis\n\tsvg.append(\"text\").text(\"Y Label\")\n\t\t.attr(\"x\",0-height/2)\n\t\t.attr(\"y\",0-margin.left)\n\t\t.attr(\"dy\",\"1em\")\n      \t.style(\"text-anchor\", \"middle\")\n\t\t.attr(\"transform\",\"rotate(-90)\");\n\tsvg.append(\"text\").text(\"X Label\")\n\t\t.attr(\"x\",width/2)\n\t\t.attr(\"y\",height+margin.bottom)\n      \t.style(\"text-anchor\", \"middle\");\n\n\n\n       /*\n        var margin = {top: 20, right: 40, bottom: 60, left: 40},\n        width = 500 - margin.left - margin.right,\n        height = 250 - margin.top - margin.bottom;\n\n        var divTooltip = d3\n            .select('body')\n            .append('div')\n            .attr('class', 'toolTip')\n            .attr('font-size', '100px')\n\n        var x = d3.scaleBand()\n            .domain(d3.extent(post_data, function (d) {return d.value;}))\n            .rangeRound([0, width])\n            .padding(0.4);\n\n\n        var y = d3.scaleLinear()\n            .range([height, 0])\n            .domain(post_data.map(function (d) {return d.name}));\n\n        var xAxis = d3.axisBottom(x)\n        .ticks(5);\n\n        var yAxis = d3.axisLeft(y)\n        .tickFormat(function(d) { return parseInt(d) });\n\n        var svg = d3.select(d3Container.current)\n        .attr('class', 'root_netsentiment')\n        .append(\"svg\")\n        .attr(\"width\", width + margin.left + margin.right)\n        .attr(\"height\", height + margin.top + margin.bottom)\n        .append(\"g\")\n        .attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\");\n\n        // Ticks on x-axis and y-axis\n        svg.append(\"g\")\n        .attr(\"class\", \"x axis\")\n        .attr(\"transform\", \"translate(0,\" + height/2 + \")\")\n        .call(xAxis)\n        .selectAll(\"text\")\n        .style(\"text-anchor\", \"end\")\n        .attr(\"dx\", \"1.2em\")\n        .attr(\"dy\", \"1em\")\n        .attr('overflow', 'visible')\n        .attr(\"transform\", \"rotate(-20)\")\n        .attr('fill', '#4d4d4d')\n\n        svg.append(\"g\")\n        .attr(\"class\", \"y axis\")\n        .call(yAxis)\n        .append(\"text\")\n        .attr(\"transform\", \"rotate(-90)\")\n        .attr(\"y\", 6)\n        .attr(\"dy\", \".71em\")\n        .style(\"text-anchor\", \"end\")\n        .style(\"fill\", \"#005282\")\n        .text(\"Engagement\");\n\n        var graph = svg.selectAll(\".date\")\n        .attr('class', 'graph')\n        .data(post_data)\n        //.enter()\n        //.append(\"g\")\n        .join('g')\n        .attr(\"class\", \"g\")\n        .attr(\"transform\", function(d) { return \"translate(\" + x(d.name) + \",0)\"; });\n\n        graph.selectAll(\"rect\")\n        .data(function(d){return d.values})\n        .join('rect')\n        .attr(\"width\", x.bandwidth())\n        .attr(\"x\", function(d) { return x(d.name); })\n        .attr(\"y\", function(d) { return y(d.value)})\n        //.attr(\"height\", function(d) { return height - (d.yscale==0 ? y(d.value) : y1(d.value)); })\n  \n        .style(\"fill\", function(d) { return d.value > 0 ? '#63A37B' : 'rgb(241, 86, 69)'})\n        .style(\"cursor\", \"pointer\")\n\n        */\n\n        /*\n        var margin = {top: 30, right: 10, bottom: 50, left: 50},\n        width = 150,\n        height = 150;\n\t\t\n        var data = [{value: 10, dataset:\"barbaz\"},\n        {value: 40, dataset:\"barbar\"},\n        {value: -10, dataset:\"foobaz\"},\n        {value: 50, dataset:\"foobar\"},\n        ];\n\n        // Add svg to\n        var svg = d3.select(d3Container.current)\n        .attr('class', 'root_netsentiment')\n        .append('svg')\n        .attr('width', width + margin.left + margin.right)\n        .attr('height', height + margin.top + margin.bottom)\n        .append('g')\n        .attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n        // set the ranges\n        var y = d3.scaleBand()\n            .range([height, 0])\n            .padding(0.1);\n\n        var x = d3.scaleLinear()\n            //.range([0, width])\n            .rangeRound([margin.left, width - margin.right])\n\n        // Scale the range of the data in the domains\n        x.domain(d3.extent(post_data, function (d) {return d.value;}));\n        \n        y.domain(post_data.map(function (d) {\n            return d.name;\n        }));\n\n        var xAxis = d3.axisBottom(x)\n        .ticks(5)\n\n        var yAxis = d3.axisRight(y)\n\n        // append the rectangles for the bar chart\n        svg.selectAll(\".bar\")\n            .data(post_data)\n            .enter().append(\"rect\")\n            .attr(\"class\", function (d) {\n                return \"bar bar--\" + (d.value < 0 ? \"negative\" : \"positive\");\n            })\n            .attr(\"x\", function (d) {\n                return x(Math.min(0, d.value));\n            })\n            .attr(\"y\", function (d) {\n                return y(d.name);\n            })\n            .attr(\"width\", function (d) {\n                return Math.abs(x(d.value) - x(0));\n            })\n            .attr(\"height\", y.bandwidth());\n\n        // add the x Axis\n        svg.append(\"g\")\n            .attr(\"class\", \"x axis\")\n            .attr(\"transform\", \"translate(0,\" + height + \")\")\n            .call(xAxis)\n            .selectAll(\".x.axis text\")\n            .style(\"fill\",\"#4d4d4d\")\n\n        // add the y Axis\n        svg.append(\"g\")\n            .attr(\"class\", \"y axis\")\n            .attr(\"transform\", \"translate(\" + x(0) + \",0)\")\n            .call(yAxis)\n            .selectAll(\".y.axis text\")\n            .style(\"fill\",\"#4d4d4d\")\n\n       */ \n\n    }) // close useeffect\n\n    return(\n        <>\n            <svg id='netSentiment' width={500} height={300} ref={d3Container}></svg>\n\n        </>\n    )\n}\n\nexport default NetSentiment"]},"metadata":{},"sourceType":"module"}