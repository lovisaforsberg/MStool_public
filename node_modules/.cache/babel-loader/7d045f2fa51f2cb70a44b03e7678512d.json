{"ast":null,"code":"var _jsxFileName = \"/Users/lovisaforsberg/MS_vis/ms_viz/src/components/netsentiment.js\",\n    _s = $RefreshSig$();\n\nimport React, { useContext, useEffect, useRef, useReducer, useState, createContext } from \"react\";\nimport * as d3 from 'd3';\nimport { SentimentContext } from '../App';\nimport { HoverContext } from '../App';\nimport '../style/netsentiment.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst NetSentiment = () => {\n  _s();\n\n  const SentSentimentContext = useContext(SentimentContext);\n  const {\n    choosenSentiment,\n    setChoosenSentiment\n  } = SentSentimentContext;\n  var post_data = [];\n\n  const handleData = data => {\n    if (!('children' in data)) {\n      post_data.push({\n        value: (data.pos - data.neg) * data.comments,\n        name: data.name\n      });\n    } else {\n      data.children.forEach(child => {\n        handleData(child);\n      });\n    }\n  };\n\n  handleData(choosenSentiment);\n  console.log(post_data);\n  const d3Container = useRef(null);\n  useEffect(() => {\n    d3.select(\".root_netsentiment\").selectAll('*').remove();\n    var margin = {\n      top: 30,\n      right: 10,\n      bottom: 50,\n      left: 50\n    },\n        width = 250,\n        height = 150;\n    var data = [{\n      value: 10,\n      dataset: \"barbaz\"\n    }, {\n      value: 40,\n      dataset: \"barbar\"\n    }, {\n      value: -10,\n      dataset: \"foobaz\"\n    }, {\n      value: 50,\n      dataset: \"foobar\"\n    }]; // Add svg to\n\n    var svg = d3.select(d3Container.current).attr('class', 'root_netsentiment').append('svg').attr('width', width + margin.left + margin.right).attr('height', height + margin.top + margin.bottom).append('g').attr('transform', 'translate(' + margin.left + ',' + margin.top + ')'); // set the ranges\n\n    var y = d3.scaleBand().range([height, 0]).padding(0.1);\n    var x = d3.scaleLinear(); //.range([0, width]);\n    // Scale the range of the data in the domains\n\n    x.domain(d3.extent(post_data, function (d) {\n      return d.value;\n    }));\n    y.domain(post_data.map(function (d) {\n      return d.name;\n    })); // append the rectangles for the bar chart\n\n    svg.selectAll(\".bar\").data(post_data).enter().append(\"rect\").attr(\"class\", function (d) {\n      return \"bar bar--\" + (d.value < 0 ? \"negative\" : \"positive\");\n    }).attr(\"x\", function (d) {\n      return x(Math.min(0, d.value));\n    }).attr(\"y\", function (d) {\n      return y(d.name);\n    }).attr(\"width\", function (d) {\n      return Math.abs(x(d.value) - x(0));\n    }).attr(\"height\", y.bandwidth()); // add the x Axis\n\n    svg.append(\"g\").attr(\"class\", \"x axis\").attr(\"transform\", \"translate(0,\" + height + \")\").call(d3.axisBottom(x)).selectAll(\".x.axis text\").style(\"fill\", \"#4d4d4d\"); // add the y Axis\n\n    svg.append(\"g\").attr(\"class\", \"y axis\").attr(\"transform\", \"translate(\" + x(0) + \",0)\").call(d3.axisRight(y)).selectAll(\".y.axis text\").style(\"fill\", \"#4d4d4d\");\n  }); // close useeffect\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"svg\", {\n      id: \"netSentiment\",\n      width: 500,\n      height: 300,\n      ref: d3Container\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n};\n\n_s(NetSentiment, \"14ZIpd5j6XXI4XNvkUCoJ/lJoUc=\");\n\n_c = NetSentiment;\nexport default NetSentiment;\n\nvar _c;\n\n$RefreshReg$(_c, \"NetSentiment\");","map":{"version":3,"sources":["/Users/lovisaforsberg/MS_vis/ms_viz/src/components/netsentiment.js"],"names":["React","useContext","useEffect","useRef","useReducer","useState","createContext","d3","SentimentContext","HoverContext","NetSentiment","SentSentimentContext","choosenSentiment","setChoosenSentiment","post_data","handleData","data","push","value","pos","neg","comments","name","children","forEach","child","console","log","d3Container","select","selectAll","remove","margin","top","right","bottom","left","width","height","dataset","svg","current","attr","append","y","scaleBand","range","padding","x","scaleLinear","domain","extent","d","map","enter","Math","min","abs","bandwidth","call","axisBottom","style","axisRight"],"mappings":"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","sourcesContent":["import React, { useContext, useEffect, useRef, useReducer, useState, createContext } from \"react\";\nimport * as d3 from 'd3'\nimport {SentimentContext} from '../App'\nimport {HoverContext} from '../App'\nimport '../style/netsentiment.css'\n\n\nconst NetSentiment = () =>{\n\n    const SentSentimentContext = useContext(SentimentContext);\n    const {choosenSentiment, setChoosenSentiment} = SentSentimentContext\n\n\n    var post_data = []\n    const handleData = (data) =>{\n        if (!('children' in data)){\n            post_data.push({\n                value: (data.pos-data.neg)*data.comments, name:data.name\n            })\n        }\n        else{\n            data.children.forEach(child =>{\n                handleData(child)\n            })\n        }\n    }\n\n    handleData(choosenSentiment)\n    console.log(post_data)\n\n    const d3Container = useRef(null)\n\n    useEffect(()=>{\n\n        d3.select(\".root_netsentiment\").selectAll('*').remove()\n\n        var margin = {top: 30, right: 10, bottom: 50, left: 50},\n        width = 250,\n        height = 150;\n\t\t\n        var data = [{value: 10, dataset:\"barbaz\"},\n        {value: 40, dataset:\"barbar\"},\n        {value: -10, dataset:\"foobaz\"},\n        {value: 50, dataset:\"foobar\"},\n        ];\n\n        // Add svg to\n        var svg = d3.select(d3Container.current)\n        .attr('class', 'root_netsentiment')\n        .append('svg').attr('width', width + margin.left + margin.right).attr('height', height + margin.top + margin.bottom).append('g').attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n        // set the ranges\n        var y = d3.scaleBand()\n            .range([height, 0])\n            .padding(0.1);\n\n        var x = d3.scaleLinear()\n            //.range([0, width]);\n\n        // Scale the range of the data in the domains\n        x.domain(d3.extent(post_data, function (d) {return d.value;}));\n\n        y.domain(post_data.map(function (d) {\n            return d.name;\n        }));\n\n        // append the rectangles for the bar chart\n        svg.selectAll(\".bar\")\n            .data(post_data)\n            .enter().append(\"rect\")\n            .attr(\"class\", function (d) {\n                return \"bar bar--\" + (d.value < 0 ? \"negative\" : \"positive\");\n            })\n            .attr(\"x\", function (d) {\n                return x(Math.min(0, d.value));\n            })\n            .attr(\"y\", function (d) {\n                return y(d.name);\n            })\n            .attr(\"width\", function (d) {\n                return Math.abs(x(d.value) - x(0));\n            })\n            .attr(\"height\", y.bandwidth());\n\n        // add the x Axis\n        svg.append(\"g\")\n            .attr(\"class\", \"x axis\")\n            .attr(\"transform\", \"translate(0,\" + height + \")\")\n            .call(d3.axisBottom(x))\n            .selectAll(\".x.axis text\")\n            .style(\"fill\",\"#4d4d4d\")\n\n        // add the y Axis\n        svg.append(\"g\")\n            .attr(\"class\", \"y axis\")\n            .attr(\"transform\", \"translate(\" + x(0) + \",0)\")\n            .call(d3.axisRight(y))\n            .selectAll(\".y.axis text\")\n            .style(\"fill\",\"#4d4d4d\")\n\n        \n\n    }) // close useeffect\n\n    return(\n        <>\n            <svg id='netSentiment' width={500} height={300} ref={d3Container}></svg>\n\n        </>\n    )\n}\n\nexport default NetSentiment"]},"metadata":{},"sourceType":"module"}