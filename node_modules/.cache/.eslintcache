[{"/Users/lovisaforsberg/MS_vis/ms_viz/src/index.js":"1","/Users/lovisaforsberg/MS_vis/ms_viz/src/App.js":"2","/Users/lovisaforsberg/MS_vis/ms_viz/src/reportWebVitals.js":"3","/Users/lovisaforsberg/MS_vis/ms_viz/src/components/sunburst.js":"4","/Users/lovisaforsberg/MS_vis/ms_viz/src/components/piechart.js":"5","/Users/lovisaforsberg/MS_vis/ms_viz/src/components/graphContainer.js":"6","/Users/lovisaforsberg/MS_vis/ms_viz/src/components/barchart.js":"7","/Users/lovisaforsberg/MS_vis/ms_viz/src/components/textinsight.js":"8","/Users/lovisaforsberg/MS_vis/ms_viz/src/components/netsentiment.js":"9","/Users/lovisaforsberg/MS_vis/ms_viz/src/components/login.js":"10","/Users/lovisaforsberg/MS_vis/ms_viz/src/firebase/fire.js":"11","/Users/lovisaforsberg/MS_vis/ms_viz/src/components/Navbar.js":"12","/Users/lovisaforsberg/MS_vis/ms_viz/src/components/linechart.js":"13"},{"size":500,"mtime":1615997752589,"results":"14","hashOfConfig":"15"},{"size":2028,"mtime":1618216857743,"results":"16","hashOfConfig":"15"},{"size":362,"mtime":1613051269009,"results":"17","hashOfConfig":"15"},{"size":15257,"mtime":1618216847755,"results":"18","hashOfConfig":"15"},{"size":6800,"mtime":1618217142998,"results":"19","hashOfConfig":"15"},{"size":3875,"mtime":1616589524012,"results":"20","hashOfConfig":"15"},{"size":16182,"mtime":1617782636970,"results":"21","hashOfConfig":"15"},{"size":4115,"mtime":1616076176239,"results":"22","hashOfConfig":"15"},{"size":18731,"mtime":1617196254159,"results":"23","hashOfConfig":"15"},{"size":1523,"mtime":1616072334665,"results":"24","hashOfConfig":"15"},{"size":568,"mtime":1616072334673,"results":"25","hashOfConfig":"15"},{"size":832,"mtime":1616076176236,"results":"26","hashOfConfig":"15"},{"size":12887,"mtime":1618215264911,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"1t6p0e3",{"filePath":"31","messages":"32","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"30"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"30"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"30"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"30"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":22,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"30"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":22,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"30"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"30"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"30"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"59","messages":"60","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"30"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"30"},"/Users/lovisaforsberg/MS_vis/ms_viz/src/index.js",[],["65","66"],"/Users/lovisaforsberg/MS_vis/ms_viz/src/App.js",["67","68","69","70","71","72","73","74"],"import React, { useContext, useEffect, useRef, useReducer, useState, createContext } from \"react\";\nimport './App.css';\nimport * as d3 from 'd3'\nimport SunBurst from './components/sunburst'\nimport PieChart from './components/piechart'\nimport GraphContainer, { HoverSentContext } from './components/graphContainer'\nimport '../node_modules/@ibm/plex/css/ibm-plex.css';\nimport NetSentiment from './components/netsentiment'\nimport Login from './components/login'\nimport Navbar from './components/Navbar'\n\n/*\nimport data from './data/test.json'\nimport newdata from './data/newstructure.json'\n*/\nimport data from './data/anonymData.json'\n\n\n\nexport const SentimentContext = createContext({})\nexport const HoverContext = createContext({})\nexport const UserContext = createContext({})\nexport const GroupByContext = createContext({})\n\n\nfunction App() {\n\n  const [choosenSentiment, setChoosenSentiment] = useState(data.children[0])\n  const [hover, setHover] = useState([])\n  const [isUser, setIsUser] = useState(null)\n  const [groupByChannel, setGroupByChannel] = useState(true)\n\n\n\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n      <UserContext.Provider value ={{isUser, setIsUser}}>\n    {isUser === null ? <Login></Login>:\n\n      <SentimentContext.Provider value = {{choosenSentiment, setChoosenSentiment}}>\n      <HoverContext.Provider value = {{hover, setHover}}>\n        <GroupByContext.Provider value = {{groupByChannel, setGroupByChannel}}>\n        <div className='NavBar'>\n          <Navbar></Navbar>\n        </div>\n        <div className='Content'>\n     \n          <div className='sunburstContainer'>\n            <SunBurst></SunBurst>\n          </div>\n    \n          <div className='piechartContainer'>\n            <GraphContainer></GraphContainer>\n          </div>\n          </div>\n          </GroupByContext.Provider>\n        </HoverContext.Provider>\n        </SentimentContext.Provider>\n    }\n      \n\n        </UserContext.Provider>\n        \n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","/Users/lovisaforsberg/MS_vis/ms_viz/src/reportWebVitals.js",[],"/Users/lovisaforsberg/MS_vis/ms_viz/src/components/sunburst.js",["75","76","77","78","79","80","81","82","83","84","85"],"import React, { useContext, useEffect, useRef, useReducer, useState, createContext } from \"react\";\nimport ReactTooltip from 'react-tooltip';\nimport * as d3 from 'd3'\nimport {SentimentContext} from '../App'\nimport {HoverContext} from '../App'\nimport {GroupByContext} from '../App'\nimport '../style/sunburst.css'\n\n/*\nimport data from '../data/test.json'\nimport newdata from '../data/newstructure.json'\n*/\nimport data from '../data/anonymData.json'\nimport newdata from '../data/anonymDataNewstructure.json'\n\n\nconst SunBurst = ()=> {\n\n  const SentSentimentContext = useContext(SentimentContext);\n  const {choosenSentiment, setChoosenSentiment} = SentSentimentContext\n\n  const SentHoverContext = useContext(HoverContext);\n  const {hover, setHover} = SentHoverContext\n\n  const SentGroupByContext = useContext(GroupByContext);\n  const {groupByChannel, setGroupByChannel} = SentGroupByContext\n\n  const [choosenData, setChoosesData] = useState(choosenSentiment)\n  const [navText, setNavText] = useState('')\n\n\n  //const categories = ['around the block', 'block of the week', 'caves and cliffs', 'marketplace highlights', 'realms plus', 'taking inventory', 'engagement driver', 'pixel art', 'satisfying loops', 'community highlights', 'youtube support']\n  const categories =['doctors', 'revolution', 'can be found in liverpool', 'george harrison', \"ringo's singing lead\", 'julia/julian', 'cry', 'animals', 'featured in mad men', 'norway', 'instrumentals']\n  \n  const handleFilter = (clicked) => {\n    setChoosenSentiment(clicked)\n    //console.log(clicked)\n  }\n  const handleHover = (data) => {\n    if('post_content' in data){\n      var ar = []\n      ar.push(data.name)\n      setHover(ar)\n    }\n    else if('children' in data){\n      var ar = []\n      data.children.forEach(child=>{\n        ar.push(child.name)\n      })\n      setHover(ar)\n    }\n    else{\n      setHover([])\n    }\n  }\n\n  const handleDataSet = (click) =>{\n    if(click === 'cha'){\n      setChoosenSentiment(data.children[0])\n      setChoosesData(data.children[0])\n      setGroupByChannel(true)\n      document.getElementById('cha_button').className = 'groupButtonActive'\n      document.getElementById('cat_button').className = 'groupButtonInactive'\n\n\n    }\n    else{\n      setChoosenSentiment(newdata.children[0])\n      setChoosesData(newdata.children[0])\n      setGroupByChannel(false)\n      document.getElementById('cat_button').className = 'groupButtonActive'\n      document.getElementById('cha_button').className = 'groupButtonInactive'\n\n\n    }\n}\n\n  const handleData = (channel) =>{\n    if (channel === 'fb'){\n      setChoosesData(data.children[0])\n      setChoosenSentiment(data.children[0])\n      document.getElementById('fb_button').className = 'channelButtonActive'\n      document.getElementById('ig_button').className = 'channelButtonInactive'\n      document.getElementById('tw_button').className = 'channelButtonInactive'\n\n    }\n    if (channel === 'ig'){\n      setChoosesData(data.children[1])\n      setChoosenSentiment(data.children[1])\n      document.getElementById('fb_button').className = 'channelButtonInactive'\n      document.getElementById('ig_button').className = 'channelButtonActive'\n      document.getElementById('tw_button').className = 'channelButtonInactive'\n    }\n    if (channel === 'tw'){\n      setChoosesData(data.children[2])\n      setChoosenSentiment(data.children[2])\n      document.getElementById('fb_button').className = 'channelButtonInactive'\n      document.getElementById('ig_button').className = 'channelButtonInactive'\n      document.getElementById('tw_button').className = 'channelButtonActive'\n    }\n  }\n\n  const handleOption = (event) =>{\n    console.log(event.target.value)\n    setChoosenSentiment(newdata.children[event.target.value])\n    setChoosesData(newdata.children[event.target.value])\n  }\n\n\n    const d3Container = useRef(null)\n\n    useEffect(()=>{\n    \n    d3.select(\".root_sunburst\").selectAll('*').remove()\n\n    //setData(data)\n\n    const width = 500\n    const radius = width / 7\n\n\n    const partition = choosenData => {\n        const root = d3.hierarchy(choosenData)\n        .sum(d => (d.eng_rate))\n        //.sort((a, b) => b.value - a.value);\n        .sort(function(a, b) { return d3.ascending(a.name, b.name); })\n\n        return d3.partition()\n        .size([2 * Math.PI, root.height + 1])\n        (root);\n      }\n  \n        //var color = d3.scaleOrdinal(d3.quantize(d3.interpolateRainbow, data.children.length + 1));\n        var color = d3\n              .scaleOrdinal(['#07737F','#27306E', '#62254A', '#7C2438', '#A6193C', '#FFB86E'])\n        /*\n        var color = d3\n              .scaleOrdinal()\n              .range(['#CC5BA4', '#C65649', '#EAD94C', '#68AD7C', '#59A5CC'])\n              */\n\n      const format = d3.format(\",d\");\n\n      var divTooltip = d3\n        .select('body')\n        .append('div')\n        .attr('class', 'toolTip')\n        .attr('font-size', '50px')\n\n\n      const arc = d3.arc()\n        .startAngle(d => d.x0)\n        .endAngle(d => d.x1)\n        .padAngle(d => Math.min((d.x1 - d.x0) / 2, 0.005))\n        .padRadius(radius * 1.5)\n        .innerRadius(d => d.y0 * radius)\n        .outerRadius(d => (Math.max(d.y0 * radius, d.y1 * radius - 1)));\n\n      const root = partition(choosenData);\n\n      root.each(d => d.current = d);\n\n\n\n\nconst svg = d3.select(d3Container.current)\n    .attr('class', 'root_sunburst')\n    .append('svg')\n    //.style(\"width\", \"100%\")\n    //.style(\"height\", \"auto\")\n    .style(\"font\", \"10px sans-serif\");\n\n\nd3.select('#sunBurst')\n.data(root.descendants().slice(1))\n.append('text')\n.attr('class', 'NaviagationText')\n.html(navText)\n.attr(\"dy\", \"1em\")\n\nconst g = svg.append(\"g\")\n    .attr(\"transform\", `translate(${width/2},${width/2})`);\n\nconst path = g.append(\"g\")\n.selectAll(\"path\")\n.data(root.descendants().slice(1))\n.enter().append(\"path\")\n.style(\"cursor\", \"pointer\")\n//.on('click', function(d){console.log(d.data)})\n  //.attr(\"fill\", d => { while (d.depth > 1) d = d.parent; return color(d.data.name); })\n  .attr('fill', d=> groupByChannel ? d.depth === 1 ? d.data.color : d.parent.data.color :\n  d.depth === 1 ? d.data.color : d.parent.data.color\n  //d.depth === 2 ? d.data.color : d.depth === 3 ? d.parent.data.color : color(d.name)\n  //d.depth === 2 ?  d.depth === 3 ? d.data.parent.color : 'green' : d.data.color\n  \n  )\n  //.attr(\"fill-opacity\", d => arcVisible(d.current) ? (d.children ? 1 : 0.8) : 0)\n  .attr(\"fill-opacity\", d => arcVisible(d.current) ? (d.children ? 0.6 : 0.4) : 0)\n\n  .attr(\"d\", d => arc(d.current))\n\n  .on('mousemove', function(d){\n      divTooltip\n      .style('left', d3.event.pageX+10+'px')\n      .style('top', d3.event.pageY-25+'px')\n      .style('display', 'inline-block')\n      .html(d.depth === 2 ? 'Post: '+d.data.name : groupByChannel ? 'Category: '+d.data.name: 'Channel: '+d.data.name)\n  })\n  .on('mouseout', function(d){\n    divTooltip.style('display', 'none')\n    d3.select(this).attr(\"fill-opacity\", d => arcVisible(d.current) ? (d.children ? 0.6 : 0.4) : 0)\n    handleHover([])\n  })\n  .on('click', clicked)\n  \n  .on('mouseover', function(d){\n    d3.select(this).attr(\"fill-opacity\", d => arcVisible(d.current) ? (d.children ? 0.8 : 0.6) : 0)\n    handleHover(d.data)\n    //console.log(d)\n  })\n\n\n\npath.filter(d => d.children)\n    .style(\"cursor\", \"pointer\")\n    //.on(\"click\", clicked);\n\n\n    /*\npath.append(\"title\")\n   // .text(d => `${d.ancestors().map(d => d.data.name).reverse().join(\"/\")}\\n${format(d.value)}`);\n    //.text(d => `${d.data.courseName}`);\n    .text('hejhej')\n    */\n\n  const label = g\n  .append(\"g\")\n  .attr(\"pointer-events\", \"none\")\n  .attr(\"text-anchor\", \"middle\")\n  .style(\"user-select\", \"none\")\n  .selectAll(\"text\")\n  .data(root.descendants().slice(1))\n  .join(\"text\")\n  .attr('class', 'pathLabel')\n  .attr(\"dy\", \"0.35em\")\n  .attr(\"fill-opacity\", d => +labelVisible(d.current))\n  .attr(\"transform\", d => labelTransform(d.current))\n  /*\n  .attr(\"transform\", function(d) {return d.data.children !== undefined ?\n     \"translate(\" + arc.centroid(d) + \")rotate(\" + computeTextRotation(d) + \")\":\n     labelTransform(d.current)\n    })\n  */\n  \n  .style('font-size', '10px')\n  .text(d=> d.data.name)\n /*\n // SEE ONLY THE LABELS OF THE FIRST LEVEL\n    .style('visibility', function(d) {\n      return isTextVisible(d, 0) ? 'visible' : 'hidden';   \n  })\n  */\n .style('visibility', 'visible')\n  .call(wrap, 20);\n\n  function computeTextRotation(d) {\n    var angle = (d.x0 + d.x1) / Math.PI * 90;  // <-- 1\n\n    // Avoid upside-down labels\n    return (angle < 90 || angle > 270) ? angle : angle + 180;  // <--2 \"labels aligned with slices\"\n\n    // Alternate label formatting\n    //return (angle < 180) ? angle - 90 : angle + 90;  // <-- 3 \"labels as spokes\"\n}\n\n\nconst parent = g.append(\"circle\")\n    .datum(root)\n    .attr(\"r\", radius)\n    .attr(\"fill\", \"none\")\n    .attr(\"pointer-events\", \"all\")\n    .style('cursor', 'pointer')\n    .on(\"click\", clicked)\n/*\n  g.append(\"g\")\n  .selectAll(\"circle\")\n  .text('back')\n  .text(function(d){return d.current.data.name})\n  .attr('text-anchor', 'middle')\n  .attr('alignment-baseline', 'middle')\n  .style('font-size', '12px')\n  .style(\"cursor\", \"pointer\")\n  .attr(\"pointer-events\", \"all\")\n  .on(\"click\", function(d){console.log(d.data.name)});\n*/\n\nconst textParent = g.append(\"text\")\n  .datum(root)\n  .on('mouseover', function(d){console.log(d)})\n  .attr('id', 'backText')\n  .attr('class', 'zoomedOut')\n  .attr('text-anchor', 'middle')\n  .attr('alignment-baseline', 'middle')\n  .attr(\"pointer-events\", \"all\")\n  .attr('fill', '#404040')\n  .on(\"click\", clicked)\n\n  .style('font-size', '12px')\n  .style('cursor', 'pointer')\n  .html('')\n\n\nfunction isTextVisible(d, depth){\n    if (depth === 0){\n      return d.depth === 0 || d.depth === 1;\n    } else {\n      return d.depth === depth || d.depth === depth - 1;\n    }\n  }\n\n\n\nfunction clicked(p) {\n  \n  /*\n  SEE ONLY LABEL ON FIRST LEVEL\n d3.selectAll(\".pathLabel\")\n      .style('visibility', function(d2) {\n        return d2.depth > p.depth+1 ? 'hidden' : 'visible'\n      })\n      */\n\n  handleFilter(p.data)\n  parent.datum(p.parent || root);\n  textParent.datum(p.parent || root);\n\n  if(p.depth === 0){\n    document.getElementById('backText').setAttribute(\"class\", \"zoomedOut\")\n  }\n  else{\n    document.getElementById('backText').setAttribute(\"class\", \"zoomedIn\")\n  }\n  \n  \n//setZoomedData(p.data)\n\n  root.each(d => d.target = {\n    x0: Math.max(0, Math.min(1, (d.x0 - p.x0) / (p.x1 - p.x0))) * 2 * Math.PI,\n    x1: Math.max(0, Math.min(1, (d.x1 - p.x0) / (p.x1 - p.x0))) * 2 * Math.PI,\n    y0: Math.max(0, d.y0 - p.depth),\n    y1: Math.max(0, d.y1 - p.depth)\n  });\n\n  const t = g.transition().duration(1500);\n\n  // Transition the data on all arcs, even the ones that aren’t visible,\n  // so that if this transition is interrupted, entering arcs will start\n  // the next transition from the desired position.\n  path.transition(t)\n      .tween(\"data\", d => {\n        const i = d3.interpolate(d.current, d.target);\n        return t => d.current = i(t);\n      })\n    .filter(function(d) {\n      return +this.getAttribute(\"fill-opacity\") || arcVisible(d.target);\n    })\n      .attr(\"fill-opacity\", d => arcVisible(d.target) ? (d.children ? 0.6 : 0.4) : 0.4)\n      //.attr(\"fill-opacity\", function(d){if(d.depth==2){return 0.8}if(d.depth==3){return 0.7}if(d.depth==4){return 0.5}} )\n\n      .attrTween(\"d\", d => () => arc(d.current));\n\n  label.filter(function(d) {\n      return +this.getAttribute(\"fill-opacity\") || labelVisible(d.target);\n    }).transition(t)\n      .attr(\"fill-opacity\", d => +labelVisible(d.target))      \n      .attrTween(\"transform\", d => () => labelTransform(d.current));\n\n}\n\n//Aquí se le aumenta el número de arcos que muestra\nfunction arcVisible(d) {\n  return d.y1 <= 4 && d.y0 >= 1 && d.x1 > d.x0;\n}\n\n\nfunction labelVisible(d) {\n  return d.y1 <= 5 && d.y0 >= 1 && (d.y1 - d.y0) * (d.x1 - d.x0) > 0.03;\n}\n\nfunction labelTransform(d) {\n  const x = (d.x0 + d.x1) / 2 * 180 / Math.PI;\n  const y = (d.y0 + d.y1) / 2 * radius;\n  return `rotate(${x - 90}) translate(${y},0) rotate(${x < 180 ? 0 : 180})`;\n}\n\nfunction wrap(text, width) {\n  text.each(function () {\n      var text = d3.select(this),\n          words = text.text().split(/\\s+/).reverse(),\n          word,\n          line = [],\n          lineNumber = 0,\n          lineHeight = 1, // ems\n          y = text.attr(\"y\")-((words.length+1)*4),\n          dy = parseFloat(text.attr(\"dy\")),\n          tspan = text.text(null).append(\"tspan\").attr(\"x\", 0).attr(\"y\", y).attr(\"dy\", dy + \"em\");\n      while (word = words.pop()) {\n          line.push(word);\n          tspan.text(line.join(\" \"));\n          if (tspan.node().getComputedTextLength() > width) {\n              line.pop();\n              tspan.text(line.join(\" \"));\n              line = [word];\n              tspan = text.append(\"tspan\").attr(\"x\", 0).attr(\"y\", y).attr(\"dy\", ++lineNumber * lineHeight + dy + \"em\").text(word);\n          }\n      }\n  });\n}\n\n    }, [choosenData]) // close useEffect\n\n    return(\n      <>\n      <div className='sunburstBtn'>\n      <div className='btnContainer'>\n          <button id='cha_button' className='groupButtonActive' onClick={()=>handleDataSet('cha')}>Group by Channel</button>\n          <button id='cat_button' className='groupButtonInactive' onClick={()=>handleDataSet('cat')}>Group by Categories</button>\n        </div>\n        {groupByChannel ? \n          <div className='btnContainer'>\n            <button id='fb_button' className='channelButtonActive' onClick={()=>handleData('fb')}>Facebook</button>\n            <button id='ig_button' className='channelButtonInactive' onClick={()=>handleData('ig')}>Instagram</button>\n            <button id='tw_button'className='channelButtonInactive' onClick={()=>handleData('tw')}>Twitter</button>\n          </div>:\n          <div className='btnContainer'>\n            <select className='dropDown' onChange={e=>handleOption(e)}>\n            {categories.map((cat, i)=>{\n                    return (<option value={i}>{cat}</option>)             \n                })}\n  \n            </select>\n            {/*\n            {categories.map( cat=>{\n                    return (<button id='fb_button' className='channelButtonActive small' onClick={()=>handleData('fb')}>{cat}</button>)             \n                })}\n              */}\n          </div>\n          }\n          <div className='infoContainer'>\n            <i className=\"fas fa-info-circle\" data-tip data-for='sunburstInfo'></i>\n            <ReactTooltip id='sunburstInfo' type='error' className=\"infoTooltip\" place=\"bottom\" textColor='#4d4d4d' backgroundColor='#FFDFC3'>\n              {groupByChannel ?\n              <p>The graph shows all posts for <strong>each category</strong> in the choosen channel. </p>:\n              <p>The graph shows all posts for <strong>each channel</strong> for the selected category </p>}\n              <p>The size of each part represents the <strong>engagement rate.</strong></p>\n              <p>Use the graph to zoom into specific categories or posts.</p>\n              <p>Click on a post get more details and <strong>insights.</strong></p>\n\n\n            </ReactTooltip>\n          </div>\n\n          <svg id='sunBurst' width={500} height={500} radius={500/2} ref={d3Container}></svg>\n      </div>\n      </>\n    )\n\n} // close Areachart component\nexport default SunBurst; \n","/Users/lovisaforsberg/MS_vis/ms_viz/src/components/piechart.js",["86","87","88","89","90","91","92","93"],"import React, { useContext, useEffect, useRef, useReducer, useState, createContext } from \"react\";\nimport * as d3 from 'd3'\nimport './linechart.css'\nimport {SentimentContext} from '../App'\nimport {HoverSentContext} from './graphContainer'\nimport '../style/piechart.css'\n\n\n/*\navg value to put in csv\navg,30,4,66,27,5,68,23,9,67\n*/\n\nconst PieChart = ()=> {\n\n    const SentSentimentContext = useContext(SentimentContext);\n    const {choosenSentiment, setChoosenSentiment} = SentSentimentContext\n\n    const SentHoverSentContext = useContext(HoverSentContext)\n    const {hoverSent, setHoverSent} = SentHoverSentContext\n\n    const d3Container = useRef(null)\n\n    useEffect(()=>{\n    \n        d3.select(\".root_piechart\").selectAll('*').remove()\n\n        var totals = [{\n            title: \"Positive\",\n            value: 30,\n        },\n        {\n            title: \"Negative\",\n            value: 20,\n        },\n        {\n            title: \"Neutral\",\n            value: 70,\n        }\n    ];\n\n        var width = 100;\n        var height = 100;\n        var radius = Math.min(width, height) / 2;\n        var donutWidth = 20;\n        var color = d3.scaleOrdinal()\n            .range(['#63A37B','#F15645', '#E5E5E5']);\n        \n        var svg = d3.select(d3Container.current)\n        .attr('class', \"root_piechart\")\n            .append('svg')\n            .attr('width', width)\n            .attr('height', height)\n            .append('g')\n            .attr('transform', 'translate(' + (width / 2) +\n                ',' + (height / 2) + ')');\n        \n        var arc = d3.arc()\n            .innerRadius(radius - donutWidth)\n            .outerRadius(radius);\n        \n        var pie = d3.pie()\n            .value(function (d) {\n                return d.value;\n            })\n            .sort(null);\n        \n        var legendRectSize = 13;\n        var legendSpacing = 7;\n        \n        var donutTip = d3.select(\"body\").append(\"div\")\n            .attr(\"class\", \"donut-tip\")\n            .style(\"opacity\", 0);\n        \n        var path = svg.selectAll('path')\n            .data(pie(choosenSentiment.sentiment))\n            .enter()\n            .append('path')\n            //.style(\"cursor\", \"pointer\")\n            .attr('d', arc)\n            .attr('fill', function (d, i) {\n                return color(d.data.title);\n            })\n            .attr('transform', 'translate(0, 0)')\n            .on('mouseover', function (d, i) {\n                /*\n                d3.select(this).transition()\n                    .duration('50')\n                    .attr('opacity', '.85');\n                donutTip.transition()\n                    .duration(50)\n                    .style(\"opacity\", 1);\n                let num = (Math.round((d.value / d.data.all) * 100)).toString() + '%';\n                donutTip.html(num)\n                    .style(\"left\", (d3.event.pageX + 10) + \"px\")\n                    .style(\"top\", (d3.event.pageY - 15) + \"px\");\n                */\n               d3.select('.value_text').remove()\n               svg.append('text')\n               .attr('class', 'value_text')\n               .attr('x', legendRectSize + legendSpacing)\n               .attr('y', legendRectSize - legendSpacing)\n               .attr('font-size', '15px')\n               .attr('text-anchor', 'middle')\n               .attr('fill', '#4d4d4d')\n               .text(d.data.title+ ': '+Math.round(d.data.value)+' %')\n               .call(wrap)\n                setHoverSent(d.data.title)\n\n        \n            })\n            .on('mouseout', function (d, i) {\n                setHoverSent('')\n                d3.select(this).transition()\n                    .duration('50')\n                    .attr('opacity', '1');\n                donutTip.transition()\n                    .duration('50')\n                    .style(\"opacity\", 0);\n                \n            });\n        \n        /*\n        var legend = svg.selectAll('.legend')\n            .data(color.domain())\n            .enter()\n            .append('g')\n            .attr('class', 'circle-legend')\n            .attr('transform', function (d, i) {\n                var height = legendRectSize + legendSpacing;\n                var offset = height * color.domain().length / 2;\n                var horz = -2 * legendRectSize - 13;\n                var vert = i * height - offset;\n                return 'translate(' + horz + ',' + vert + ')';\n            });\n        \n        legend.append('circle')\n            .style('fill', color)\n            .style('stroke', color)\n            .attr('cx', 0)\n            .attr('cy', 0)\n            .attr('r', '.5rem');\n        \n        legend.append('text')\n            .attr('x', legendRectSize + legendSpacing)\n            .attr('y', legendRectSize - legendSpacing)\n            .text(function (d) {\n                return d;\n            });\n        */\n        \n        function change(data) {\n            var pie = d3.pie()\n                .value(function (d) {\n                    return d.value;\n                }).sort(null)(data);\n        \n            var width = 360;\n            var height = 360;\n            var radius = Math.min(width, height) / 2;\n            var donutWidth = 75;\n        \n            path = d3.select(\"#donut\")\n                .selectAll(\"path\")\n                .data(pie); // Compute the new angles\n            var arc = d3.arc()\n                .innerRadius(radius - donutWidth)\n                .outerRadius(radius);\n            path.transition().duration(500).attr(\"d\", arc); // redrawing the path with a smooth transition\n        }\n\n        function wrap(text, width) {\n            text.each(function() {\n            var text = d3.select(this),\n            words = text.text().split(/\\s+/).reverse(),\n            word,\n            line = [],\n            lineNumber = 0,\n            lineHeight = 1.1, // ems\n            y = text.attr(\"y\"),\n            dy = parseFloat(text.attr(\"dy\")),\n            tspan = text.text(null).append(\"tspan\").attr(\"x\", 0).attr(\"y\", y).attr(\"dy\", dy + \"em\")\n            while (word = words.pop()) {\n                line.push(word)\n                tspan.text(line.join(\" \"))\n                if (tspan.node().getComputedTextLength() > width) {\n                    line.pop()\n                    tspan.text(line.join(\" \"))\n                    line = [word]\n                    tspan = text.append(\"tspan\").attr(\"x\", 0).attr(\"y\", y).attr(\"dy\", `${++lineNumber * lineHeight + dy}em`).text(word)\n                }\n            }\n            })\n        }\n        \n        \n\n    }) // close useeffect\n\n    return(\n      <>\n      <div className='pieContainer'>\n          <div className='pieHeadline'>Total sentiment for {choosenSentiment.name}</div>\n        <svg id='pieChart' width=\"100\" height=\"100\" ref={d3Container}></svg>\n\n      </div>\n\n        </>\n    )\n}\n\nexport default PieChart; \n","/Users/lovisaforsberg/MS_vis/ms_viz/src/components/graphContainer.js",["94","95","96","97","98","99","100"],"import React, { useContext, useEffect, useRef, useReducer, useState, createContext, Children } from \"react\";\nimport * as d3 from 'd3'\nimport PieChart from './piechart'\n//import LineChart from './Line_chart'\nimport BarChart from './barchart'\nimport TextInsight from './textinsight'\nimport NetSentiment from './netsentiment'\nimport LineChart from './linechart'\nimport '../style/graphContainer.css'\nimport {SentimentContext} from '../App'\n\nexport const HoverSentContext = createContext({})\nexport const IsPostContext = createContext({})\nexport const allPostsContext = createContext({})\n\n\n\nconst GraphContainer = ()=> {\n    const SentSentimentContext = useContext(SentimentContext);\n    const {choosenSentiment, setChoosenSentiment} = SentSentimentContext\n\n    const [hoverSent, setHoverSent] = useState('')\n\n    const [navText, setNavText] = useState(choosenSentiment.name)\n    const [navType, setNavType] = useState()\n\n    const [allPosts, setAllPosts] = useState([])\n\n\n\n\n    const [isPost, setIsPost] = useState(false)\n    const [showNet, setShowNet] = useState(false)\n    const [showTime, setShowTime] = useState(false)\n\n\n    const handlePost = ()=>{\n        if('post_content' in choosenSentiment){\n            setIsPost(true)\n        }\n        else{\n            setIsPost(false)\n        }\n    }\n\n    const handleNav = () =>{\n        if ('category' in choosenSentiment){\n            setNavType('Post: ')\n        }\n        else if(choosenSentiment.name === 'facebook' || choosenSentiment.name === 'instagram' || choosenSentiment.name === 'twitter'){\n            setNavType('Channel: ')\n        }\n        else{\n            setNavType('Category: ')\n        }\n    }\n\n    function startsWithCapital(word){\n        return word.charAt(0) === word.charAt(0).toUpperCase()\n    }\n\n    const handlePressNet = (e) =>{\n        setShowTime(false)\n        setShowNet(e=>!e)\n    }\n    const handlePressTime = (e) =>{\n        setShowNet(false)\n        setShowTime(e=>!e)\n    }\n\n\n    useEffect(()=>{\n        handlePost()\n        setNavText(choosenSentiment.name)\n        handleNav()\n    })\n\n    return(\n        <>\n        <div className='graphTextContainer'>\n            <HoverSentContext.Provider value = {{hoverSent, setHoverSent}}>\n                <IsPostContext.Provider value = {{isPost, setIsPost}}>\n                    <allPostsContext.Provider value = {{allPosts, setAllPosts}}>\n\n                    <text className='NaviagationText'><strong>{navType}</strong>{navText}</text>\n\n\n                        <div className='PieBarContainer'>\n                            {isPost ? null : <PieChart></PieChart>}\n                            \n                            <BarChart></BarChart>\n                        </div>\n                        {isPost?null:\n                        <>\n                            <button id='cha_button' className={showNet?'toggleButtonActive':'toggleButtonInactive'} onClick={(e)=>handlePressNet(e)}>{showNet?'Hide details':'Get more details'}</button>\n                            <button id='cha_button' className={showTime?'toggleButtonActive':'toggleButtonInactive'} onClick={(e)=>handlePressTime(e)}>{showTime?'Hide change over time':'Show change over time'}</button>\n                        </>\n                        }\n\n                        <div className='textContainer'>\n                            {isPost ? \n                                <TextInsight></TextInsight>:\n                                showNet? \n                                <NetSentiment></NetSentiment>:\n                                showTime ?\n                                <LineChart></LineChart>: \n                                null} \n                        </div>\n\n                    </allPostsContext.Provider>\n                </IsPostContext.Provider>\n            </HoverSentContext.Provider>\n        </div>\n        </>\n    )\n}\nexport default GraphContainer;","/Users/lovisaforsberg/MS_vis/ms_viz/src/components/barchart.js",["101","102","103","104","105","106","107","108","109","110","111","112","113","114","115","116","117","118","119","120","121","122"],"import React, { useContext, useEffect, useRef, useReducer, useState, createContext } from \"react\";\nimport * as d3 from 'd3'\nimport ReactTooltip from 'react-tooltip';\n\nimport '../../node_modules/@ibm/plex/css/ibm-plex.css';\nimport '../style/barchart.css'\nimport {SentimentContext} from '../App'\nimport {HoverSentContext} from './graphContainer'\nimport {allPostsContext} from './graphContainer'\nimport {IsPostContext} from './graphContainer'\nimport {HoverContext} from \"../App\";\nimport {GroupByContext} from '../App'\n\n\nconst BarChart = () =>{\n\n    const SentSentimentContext = useContext(SentimentContext);\n    const {choosenSentiment, setChoosenSentiment} = SentSentimentContext\n\n    const SentHoverSentContext = useContext(HoverSentContext)\n    const {hoverSent, setHoverSent} = SentHoverSentContext\n\n    const SentHoverContext = useContext(HoverContext);\n    const {hover, setHover} = SentHoverContext\n\n    const SentIsPostContext = useContext(IsPostContext)\n    const {isPost, setIsPost} = SentIsPostContext\n\n    const SentGroupByContext = useContext(GroupByContext);\n    const {groupByChannel, setGroupByChannel} = SentGroupByContext\n\n    //const [postData, setPostData] = useState([])\n    //const [keys, setKeys] = useState([])\n    //const [sent, setSent] = useState([])\n    //const [eng, setEng] = useState([])\n\n    const [showOnlyComments, setShowOnlyComments] = useState(false)\n\n    const [showComments, setShowComments] = useState(true)\n    const [showLikes, setShowLikes] = useState(true)\n    const [showShares, setShowShares] = useState(true)\n\n\n    const d3Container = useRef(null)\n\n    var post_data = []\n    var keys = []\n    var sent = []\n    var eng = []\n  \n   var stack_key_mapping={\n    \"Positive\":\"Sentiment\",\n    \"Negative\":\"Sentiment\",\n    \"Neutral\":\"Sentiment\",\n    \"Comments\":\"Engagement\",\n    \"Likes\":\"Engagement\",\n    \"Shares\":\"Engagement\"};\n\n    const getPosts = (data, input) =>{\n        if (!('children' in data)){\n            keys.push(data.name)\n            sent.push(data.pos)\n            eng.push(data.comments)\n            post_data.push({\n                postname: data.name,\n                values: [\n                    //{name: 'Engagement', com:data.comments, like: data.likes, share: data.shares, post:data.name},\n                    //{name: 'Sentiment', pos:data.pos, neg:data.neg, neu:data.neu, post:data.name}\n                    {name:'Positive', value:data.pos, yoffset: data.pos, yscale:1, total:(data.pos+data.neg+data.neu), postName:data.name},\n                    {name:'Negative', value:data.neg, yoffset:(data.neg+data.pos), yscale:1, total:(data.pos+data.neg+data.neu), postName:data.name},\n                    {name:'Neutral', value:data.neu, yoffset:(data.pos+data.neg+data.neu), yscale:1, total:(data.pos+data.neg+data.neu), postName:data.name},\n\n                    {name:'Comments', value:data.comments/(data.followers)*100, yoffset: data.comments/(data.followers)*100, yscale:0, total:(data.comments+data.likes+data.shares)/(data.followers)*100, postName:data.name, followers:data.followers},\n                    {name:'Likes', value:data.likes/(data.followers)*100, yoffset:(data.comments+data.likes)/(data.followers)*100, yscale:0, total:(data.comments+data.likes+data.shares)/(data.followers)*100, postName:data.name, followers:data.followers},\n                    {name:'Shares', value:data.shares/(data.followers)*100, yoffset: (data.comments+data.likes+data.shares)/(data.followers)*100, yscale:0, total:(data.comments+data.likes+data.shares)/(data.followers)*100, postName:data.name, followers:data.followers},\n                ]\n            })\n        }\n        else{\n            data.children.forEach(child =>{\n                getPosts(child)\n            })\n        }\n    }\n\n\n    /*\n    const getPostsComment = (data) =>{\n        if (!('children' in data)){\n            keys.push(data.name)\n            sent.push(data.pos)\n            eng.push(data.comments)\n            post_data.push({\n                postname: data.name,\n                values: [\n                    //{name: 'Engagement', com:data.comments, like: data.likes, share: data.shares, post:data.name},\n                    //{name: 'Sentiment', pos:data.pos, neg:data.neg, neu:data.neu, post:data.name}\n                    {name:'Positive', value:data.pos, yoffset: data.pos, yscale:1, total:(data.pos+data.neg+data.neu), postName:data.name},\n                    {name:'Negative', value:data.neg, yoffset:(data.neg+data.pos), yscale:1, total:(data.pos+data.neg+data.neu), postName:data.name},\n                    {name:'Neutral', value:data.neu, yoffset:(data.pos+data.neg+data.neu), yscale:1, total:(data.pos+data.neg+data.neu), postName:data.name},\n\n                    {name:'Comments', value:data.comments/(data.followers)*100, yoffset: data.comments/(data.followers)*100, yscale:0, total:data.comments/(data.followers)*100, postName:data.name, followers:data.followers},\n                    \n                ]\n            })\n        }\n        else{\n            data.children.forEach(child =>{\n                getPostsComment(child)\n            })\n        }\n    }\n    */\n\n    const handleHover = (type) =>{\n        if(type === 'Likes' ||type === 'Comments' ||type === 'Shares'){\n            setHoverSent('eng')\n        }\n        else{\n            setHoverSent(type)\n        }\n    }\n\n    const [btnText, setBtnText] = useState('Show only comments')\n    const changeData = () =>{\n        if(showOnlyComments === false){\n            setShowOnlyComments(true)\n            document.getElementById('change_button').className = 'groupButtonActive'\n            setBtnText('Show all engagement')\n\n        }\n        else{\n            setShowOnlyComments(false)\n            document.getElementById('change_button').className = 'groupButtonInactive'\n            setBtnText('Show only comments')\n        }\n    } \n\n    const [barFilter, setBarFilter] = useState('all')\n\n    const handleFilter = (data) =>{\n        if(barFilter === data){\n            setBarFilter('all')\n            \n        }\n        else{\n            setBarFilter(data)\n        }\n    }\n    \n    getPosts(choosenSentiment)\n    //getPostsComment(choosenSentiment)\n\n\n    useEffect(()=>{\n        d3.select(\".root_barchart\").selectAll('*').remove()\n        d3.select(\".legend\").selectAll('*').remove()\n\n\n    var margin = {top: 20, right: 40, bottom: 80, left: 60},\n    width = 500 - margin.left - margin.right,\n    height = 250 - margin.top - margin.bottom;\n\n    var divTooltip = d3\n        .select('body')\n        .append('div')\n        .attr('class', 'toolTip')\n        .attr('font-size', '100px')\n\n    var x0 = d3.scaleBand()\n        .domain(groupByChannel? keys : keys.sort())\n        .rangeRound([0, width])\n        .padding(0.4);\n\n    var x1 = d3.scaleBand()\n        .domain(['Engagement','Sentiment'])\n        .rangeRound([0, x0.bandwidth()])\n        .padding(0.05);\n\n        \n\n    var y0 = d3.scaleLinear()\n        .range([height, 0])\n        //.domain([0,Math.max(...eng)]);\n        .domain([0, d3.max(post_data, function(d){return barFilter==='Comments' ? d.values[3].value :\n            barFilter==='Likes' ? d.values[4].value :\n            barFilter==='Shares' ? d.values[5].value :\n            d.values[3].value+d.values[4].value+d.values[5].value \n        })])\n        /*\n        .domain([0, d3.max(post_data, function(d) { return showOnlyComments ?d.values[3].value:\n             d.values[3].value+d.values[4].value+d.values[5].value; })]);\n             */\n        //.domain([0, d3.max(post_data, function(d) { return d.values[3].value})]);\n\n\n    var y1 = d3.scaleLinear()\n        .range([height, 0])\n        .domain([0,100]);\n        \n\n    var color = d3.scaleOrdinal(['#63A37B','#F15645', '#E5E5E5',\n                                '#005282', '#336D90', '#6692AC']);\n\n    var xAxis = d3.axisBottom(x0)\n        //.scale(x0)\n        .ticks(5);\n\n    var yAxisLeft = d3.axisLeft(y0)\n        //.scale(y0)\n        .tickFormat(function(d) {return d3.format(\".1%\")(d/100)});\n\n    var yAxisRight = d3.axisRight(y1)\n       // .scale(y1)\n        //.tickFormat(function(d) { return parseInt(d) });\n        .tickFormat(function(d) {return d+ \"%\"});\n\n\n    var svg = d3.select(d3Container.current)\n        .attr('class', 'root_barchart')\n   \n        .append(\"svg\")\n        .attr(\"width\", width + margin.left + margin.right)\n        .attr(\"height\", height + margin.top + margin.bottom)\n        .append(\"g\")\n        .attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\");\n\n\n\n    // Ticks on x-axis and y-axis\n    var xAxisG = svg.append(\"g\")\n        .attr(\"class\", \"x axis\")\n        .attr(\"transform\", \"translate(0,\" + height + \")\")\n        \n        .call(xAxis)\n        //.selectAll(\".tick text\")\n        //.call(wrap, x0.bandwidth())\n        .selectAll(\"text\")\n        .style(\"text-anchor\", \"end\")\n        .style('font-size', '8px')\n        .attr(\"dx\", \"1.2em\")\n        .attr(\"dy\", \"1em\")\n        .attr('overflow', 'visible')\n        .attr(\"transform\", \"rotate(-20)\")\n        //.style('text-decoration', 'underline')\n        .attr('fill', '#4d4d4d')\n\n        xAxisG.select(\".tick text\")\n        .attr('fill', '#005282');\n\n    svg.append(\"g\")\n        .attr(\"class\", \"y0 axis\")\n        .call(yAxisLeft)\n        .append(\"text\")\n        .attr(\"transform\", \"rotate(-90)\")\n        .attr(\"y\", 6)\n        .attr(\"dy\", \".71em\")\n        .style(\"text-anchor\", \"end\")\n        .style(\"fill\", \"#005282\")\n        .text(\"Engagement rate\");\n\n\n    svg.select('.x axis')\n    .selectAll('text')\n    .style(\"fill\",\"#07737F\");\n\n    svg.append(\"g\")\n        .attr(\"class\", \"y1 axis\")\n        .attr(\"transform\", \"translate(\" + width + \",0)\")\n        .call(yAxisRight)\n        .append(\"text\")\n        .attr(\"transform\", \"rotate(-90)\")\n        .attr(\"y\", -16)\n        .attr(\"dy\", \".71em\")\n        .style(\"text-anchor\", \"end\")\n        .style(\"fill\", \"#63A37B\")\n        .text(\"Sentiment\");\n\n    svg.select('.y1.axis')\n        .selectAll('.tick')\n        .style(\"fill\",\"#d0743c\");\n    // End ticks\n\n    var graph = svg.selectAll(\".date\")\n        .attr('class', 'graph')\n        .data(post_data)\n        //.enter()\n        //.append(\"g\")\n        .join('g')\n        .attr(\"class\", \"g\")\n        .attr(\"transform\", function(d) { return \"translate(\" + x0(d.postname) + \",0)\"; });\n        \n    graph.selectAll(\"rect\")\n        .data(function(d){return d.values})\n        .join('rect')\n        .attr(\"width\", x1.bandwidth())\n        .attr(\"x\", function(d) { return x1(stack_key_mapping[d.name]); })\n        //.attr(\"y\", function(d) { return d.yscale==0 ?  y0(d.yoffset): y1(d.yoffset); })\n\n        .attr(\"y\", function(d) { return d.yscale==0 ?  \n            barFilter === 'all' ? y0(d.yoffset) : y0(d.value)\n            : y1(d.yoffset); })\n\n\n        //.attr(\"height\", function(d) { return height - (d.yscale==0 ? y0(d.value) : y1(d.value)); })\n\n        /*\n        .attr(\"height\", function(d) { return showOnlyComments ? \n             height - (d.yscale==0 ? (d.name === 'Comments' ? y0(d.value) : height ): y1(d.value)):\n             height - (d.yscale==0 ? y0(d.value) : y1(d.value))\n             ; })\n        */\n       \n        .attr(\"height\", function(d) { return height - (d.yscale==0 ? \n            d.name === barFilter || 'all' === barFilter ? y0(d.value) : height\n            \n            : y1(d.value)); })\n\n        .attr(\"fill-opacity\", \n           (d)=> hover.length === 0 ? 1 : hover.includes(d.postName) ? 1 : 0.5\n        )\n        .style(\"fill\", function(d) { return color(d.name); })\n        //.style(\"cursor\", \"pointer\")\n        .on('mousemove', function(d){\n            handleHover(d.name)\n            divTooltip\n            .style('left', d3.event.pageX+10+'px')\n            .style('top', d3.event.pageY-25+'px')\n            .style('display', 'inline-block')\n            .html(stack_key_mapping[d.name] === 'Engagement'?\n                '<strong>'+d.postName+'</strong></br>'+\n                stack_key_mapping[d.name]+' rate: '+(d.total).toFixed(3)+'%'+'</br>'+d.name+': '+Math.round((d.value)*(d.followers))+' (rate: '+(d.value).toFixed(3)+'%)':\n                '<strong>'+d.postName+'</strong></br>'+d.name+': '+d.value+' %')\n        })\n        .on('mouseout', function(d){\n            setHoverSent('')\n          divTooltip.style('display', 'none')\n        })\n        //.on('mouseover', function(d){console.log(d.postName)})\n\n        \n\n    // Legend\n    \n    var legend = svg.selectAll(\".legend\")\n        .data(['Comments', 'Likes', 'Shares'].slice())\n        //.enter()\n        //.append(\"g\")\n        .join('g')\n        .attr(\"class\", \"legend\")\n        .attr(\"transform\", function(d, i) { return \"translate(\" + i * 60 + \", 0)\"; });\n\n    legend.append(\"rect\")\n        //.attr('x', function(d, i){return width -(20*i)})\n        .attr(\"x\", margin.right +5)\n        .attr('y', -20)\n        .attr(\"width\", 14)\n        .attr(\"height\", 14)\n        .attr('class', 'legendRect Active')\n        .attr('cursor', 'pointer')\n        .style(\"fill\", color)\n        .attr('fill-opacity', function(d){return barFilter === d ? 1:\n            barFilter === 'all' ? 1: 0.3})\n        .attr('id', function(d){return d})\n        .on('click', function(d){handleFilter(d)})\n\n\n    legend.append(\"text\")\n        .attr(\"x\", margin.right)\n        .attr(\"y\", -14)\n        .attr(\"dy\", \".35em\")\n        .style(\"text-anchor\", \"end\")\n        .attr('fill-opacity', function(d){return barFilter === d ? 1:\n            barFilter === 'all' ? 1: 0.5})        \n        .text(function(d) { return d; });\n\n    var legend2 = svg.selectAll(\".legend\")\n        .data(['Positive', 'Negative', 'Neutral'].slice())\n        //.enter()\n        //.append(\"g\")\n        .join('g')\n        .attr(\"class\", \"legend\")\n        .attr(\"transform\", function(d, i) { return \"translate(\" + i * 60 + \", 0)\"; });\n\n    legend2.append(\"rect\")\n        //.attr('x', function(d, i){return width -(20*i)})\n        .attr(\"x\", width -135)\n        .attr('y', -20)\n        .attr(\"width\", 14)\n        .attr(\"height\", 14)\n        .style(\"fill\", color)\n\n    legend2.append(\"text\")\n        .attr(\"x\", width-140)\n        .attr(\"y\", -14)\n        .attr(\"dy\", \".35em\")\n        .style(\"text-anchor\", \"end\")\n        .text(function(d) { return d; });\n        \n\n    function wrap(text, width) {\n        text.each(function() {\n        var text = d3.select(this),\n        words = text.text().split(/\\s+/).reverse(),\n        word,\n        line = [],\n        lineNumber = 0,\n        lineHeight = 1.1, // ems\n        y = text.attr(\"y\"),\n        dy = parseFloat(text.attr(\"dy\")),\n        tspan = text.text(null).append(\"tspan\").attr(\"x\", 0).attr(\"y\", y).attr(\"dy\", dy + \"em\")\n        while (word = words.pop()) {\n            line.push(word)\n            tspan.text(line.join(\" \"))\n            if (tspan.node().getComputedTextLength() > width) {\n                line.pop()\n                tspan.text(line.join(\" \"))\n                line = [word]\n                tspan = text.append(\"tspan\").attr(\"x\", 0).attr(\"y\", y).attr(\"dy\", `${++lineNumber * lineHeight + dy}em`).text(word)\n            }\n        }\n        })\n    }\n\n\n    },[choosenSentiment, hover, barFilter]) // close useeffect\n\n    return(\n        <>\n        <div className='barchartContainer'>\n\n        <div className='bar_infoContainer'>\n            <i className=\"fas fa-info-circle bar_info\" data-tip data-for='barchartInfo'></i>\n            <ReactTooltip id='barchartInfo' className=\"bar_infoTooltip\" place=\"top\" textColor='#4d4d4d' backgroundColor='#FFDFC3'>\n             \n              <p>Each group of bars represents a <strong>post</strong> in the choosen category or channel</p>\n              <p>The legend on the left hand side can be used for <strong>filtering</strong> the bar chart</p>\n\n              {isPost?\n              <p>Hover over the bars to highlight the corresponding <strong>insight</strong></p>: null\n            }\n\n\n            </ReactTooltip>\n          </div>\n \n                <svg id='barChart' width=\"500\" height=\"230\" ref={d3Container}></svg>\n                {isPost?\n                <div className='infoTextBar'>\n                    Hover over the bars to highlight the corresponding <strong>insight</strong>\n                </div>:null}\n        </div>\n       \n\n        </>\n    )\n\n}\nexport default BarChart","/Users/lovisaforsberg/MS_vis/ms_viz/src/components/textinsight.js",["123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","139","140","141","142","143","144"],"import React, { useContext, useEffect, useRef, useReducer, useState, createContext } from \"react\";\nimport * as d3 from 'd3'\nimport '../../node_modules/@ibm/plex/css/ibm-plex.css';\nimport {SentimentContext} from '../App'\nimport {HoverSentContext} from './graphContainer'\nimport {IsPostContext} from './graphContainer'\nimport '../style/textinsight.css'\n//import Highlighter from \"react-highlight-words\";\n\nconst TextInsight = () =>{\n    const SentSentimentContext = useContext(SentimentContext);\n    const {choosenSentiment, setChoosenSentiment} = SentSentimentContext\n\n    const SentHoverSentContext = useContext(HoverSentContext)\n    const {hoverSent, setHoverSent} = SentHoverSentContext\n\n    const SentIsPostContext = useContext(IsPostContext)\n    const {isPost, setIsPost} = SentIsPostContext\n\n    const [highlight, setHighlight] = useState('')\n\n    const [img, setImg] = useState(choosenSentiment.img)\n    const [textHeadline, setTextHeadline] = useState(choosenSentiment.insight_short)\n    const [qoutes, setQuotes] = useState([])\n\n    const handlePost = ()=>{\n        if('post_content' in choosenSentiment){\n            setIsPost(true)\n            setTextHeadline(choosenSentiment.insight_short.toUpperCase())\n            if(choosenSentiment.insight_quote=== '-'){\n                setQuotes([])\n            }\n            else{\n               setQuotes(choosenSentiment.insight_quote) \n            }\n            \n        }\n        else{\n            setIsPost(false)\n            setTextHeadline('')\n            setQuotes([])\n        }\n    }\n\n\n    let text = choosenSentiment.insight_full\n    const createHighlight = () =>{\n        if(!(insight === '-')){\n           for (var i = 0; i < (insight).length; i++ ){\n            text = text.replace(insight[i], (match) => `<mark class=\"highlight_${sentiment}\">${match}</mark>`)\n            } \n        }\n        else{\n        }  \n    }\n\n    if(hoverSent === 'Positive'){\n        var sentiment = 'pos'\n        var insight = choosenSentiment.insight_pos\n        createHighlight()\n    }\n    if(hoverSent === 'Negative'){\n        var sentiment = 'neg'\n        var insight = choosenSentiment.insight_neg\n        createHighlight()\n    }\n    if(hoverSent === 'Neutral'){\n        var sentiment = 'neu'\n        var insight = choosenSentiment.insight_neu\n        createHighlight()\n    }\n    if(hoverSent === 'eng'){\n        var sentiment = 'eng'\n        var insight = choosenSentiment.insight_eng\n        createHighlight()\n    }\n    console.log(qoutes)\n\n\n    //console.log(createHighlight(choosenSentiment.insight_full))\n\n    //var replaced = choosenSentiment.insight_full.replace(/[^(\\w\\s]/gi, '')\n    //console.log(replaced)\n\n    //var text = choosenSentiment.insight_full.replace(/elevant neutral sentiment/g, (match) => `<mark class=\"highlight_${sentiment}\">${match}</mark>`)\n    //console.log(text)\n    useEffect(()=>{\n        handlePost()\n    }, []) // close useeffect\n\n    return(\n        <>\n        {img === '-' ? \n        <div className='textInsightContainer'>\n            <div className='textContainer'>\n                <div className='textDesc'><italic>No further information</italic></div>\n                <a href={choosenSentiment.link} target=\"_blank\" className='postLink'>Link to post</a>\n\n            </div>\n    </div>\n        \n        :\n        <div className='textInsightContainer'>\n            <div className='textContainer'>\n                <div className='textHeadline'>{textHeadline}</div>\n                <div className='textDesc' dangerouslySetInnerHTML={{__html:text}}/>\n                {qoutes.map( quote=>{\n                    return (<div className='textQuote'>\"{quote}\"</div>)\n                \n                })}\n\n\n            </div>\n            <div className='imgContainer'>\n                <a href={choosenSentiment.link} target=\"_blank\">\n                    <img className='postImg' src={require(`../images/${img}.png`).default}></img>\n\n                </a>\n                <a href={choosenSentiment.link} target=\"_blank\" className='postLink'>Link to post</a>\n            </div>\n        </div>\n}\n\n        </>\n    )\n}\n\nexport default TextInsight;","/Users/lovisaforsberg/MS_vis/ms_viz/src/components/netsentiment.js",["145","146","147","148","149","150","151","152","153","154","155","156","157","158"],"import React, { useContext, useEffect, useRef, useReducer, useState, createContext } from \"react\";\nimport ReactTooltip from 'react-tooltip';\nimport * as d3 from 'd3'\nimport {SentimentContext} from '../App'\nimport {HoverContext} from '../App'\nimport '../style/netsentiment.css'\nimport {GroupByContext} from '../App'\n\n\nconst NetSentiment = () =>{\n\n    const SentSentimentContext = useContext(SentimentContext);\n    const {choosenSentiment, setChoosenSentiment} = SentSentimentContext\n    //const [postData, setPostData] = useState([])\n\n    const SentHoverContext = useContext(HoverContext);\n    const {hover, setHover} = SentHoverContext\n\n    const SentGroupByContext = useContext(GroupByContext);\n    const {groupByChannel, setGroupByChannel} = SentGroupByContext\n\n    // weights\n    const [commentWeight, setCommentWeight] = useState(10)\n    const [likeWeight, setLikeWeight] = useState(1)\n    const [shareWeight, setShareWeight] = useState(20)\n\n    const [useComment, setUseComment] = useState(true)\n    const [useLike, setUseLike] = useState(true)\n    const [useShare, setUseShare] = useState(true)\n\n    const [includeNet, setIncludeNet] = useState(false)\n\n    const [isSensitive, setIsSensitive] = useState(false)\n\n\n    var postData = []\n    const handleData = (data, variable) =>{\n       \n        if (!('children' in data)){\n            if (variable == 'comments'){\n                postData.push({\n                    //value: (data.pos-data.neg)*data.comments, name:data.name\n                    comment:data.comments, \n                    like: data.likes, \n                    share: data.shares, \n                    name: data.name,\n                    pos:data.pos,\n                    neg:data.neg,\n                    followers: data.followers\n                })\n            }\n            if (variable == 'likes'){\n                postData.push({\n                    value: (data.pos-data.neg)*data.likes, name:data.name\n                })\n            }\n        }\n        else{\n            data.children.forEach(child =>{\n                handleData(child, variable)\n            })\n        }\n    }\n\n\n    const handleCommentWeight = event => {\n        setCommentWeight(event.target.value);\n      };\n    const handleLikeWeight = event => {\n        setLikeWeight(event.target.value);\n      };\n    const handleShareWeight = event => {\n        setShareWeight(event.target.value);\n      };\n\n\n    handleData(choosenSentiment, 'comments')\n\n\n    const d3Container = useRef(null)\n\n    useEffect(()=>{\n\n        d3.select(\".root_netsentiment\").selectAll('*').remove()\n\n        var margin = {top: 30, right: 10, bottom: 10, left: 60},\n        width = 400 - margin.left - margin.right,\n        height = 200 - margin.top - margin.bottom;\n\n        const valueConstant = (d) =>{\n            var constant = ((\n                (useComment?(commentWeight*d.comment):1)\n                +(useLike?(likeWeight*d.like):1)\n                +(useShare?(shareWeight*d.share):1)\n            )\n                *(includeNet?(isSensitive?(d.pos-2*d.neg):(d.pos-d.neg)):1))\n\n            var rate = ((constant/d.followers)*100).toFixed(2)\n\n            return rate\n        } \n\n        //var values = postData.map(function (d) {return d.value})\n        var values = postData.map(function (d) {return valueConstant(d)})\n\n        var keys = postData.map(function (d) {return d.name})\n        \n        //var maxHeight=d3.max(values);\n        //var minHeight=d3.min(values)  \n\n        var maxHeight=Math.max(...values);\n        var minHeight=Math.min(...values) \n\n    \n    //set y scale\n\tvar yScale = d3.scaleLinear()\n    .rangeRound([0,height])\n    .domain([maxHeight,-maxHeight])\n\t\n    //add x axis\n\tvar xScale = d3.scaleBand()\n    .rangeRound([0,width])\n    .padding(0.5)\n\t.domain(groupByChannel? keys : keys.sort())\n\n    var yAxisScale = d3.axisLeft(yScale)\n    //.tickFormat(function(d) { return parseInt(d) });\n    .tickFormat(function(d) {return d+ \"%\"});\n\n\n    \n    var xAxisScale = d3.axisBottom(xScale);/*.tickFormat(\"\");remove tick label*/\n\n    var divTooltip = d3\n        .select('body')\n        .append('div')\n        .attr('class', 'toolTip')\n        .attr('font-size', '100px')\n\t\n\n    var svg = d3.select(d3Container.current)\n                .attr('class', 'root_netsentiment')\n                .append(\"svg\")\n\t\t\t\t.attr(\"width\",width+margin.left+margin.right)\n\t\t\t\t.attr(\"height\",height+margin.top+margin.bottom)\n\t\t\t\t.append(\"g\")  //add group to leave margin for axis\n\t\t\t\t.attr(\"transform\",\"translate(\"+margin.left+\",\"+margin.top+\")\");\n\n    var bars = svg.selectAll(\"rect\")\n                .data(postData)\n                .enter()\n                .append(\"rect\")\n                .attr(\"x\",function(d,i){return xScale(d.name);})\n                .attr(\"y\",function(d){if(valueConstant(d)<0){return height/2;}\n\n                                else{return yScale(\n                                    valueConstant(d)\n                                    );}})//for bottom to top\n                \n                .attr(\"width\", xScale.bandwidth()/*width/dataset.length-barpadding*/)\n                .attr(\"height\", function(d){return height/2 -yScale(Math.abs(\n                    valueConstant(d)\n                    ));})\n\n                .attr(\"fill-opacity\", \n                    (d)=> hover.length === 0 ? 1 : hover.includes(d.name) ? 1 : 0.5\n                )\n                \n                .attr(\"fill\",function(d){return valueConstant(d) > 0 ? '#63A37B' : 'rgb(241, 86, 69)'})\n                //.style(\"cursor\", \"pointer\")\n                .on('mousemove', function(d){\n                    divTooltip\n                    .style('left', d3.event.pageX+10+'px')\n                    .style('top', d3.event.pageY-25+'px')\n                    .style('display', 'inline-block')\n                    .html('<strong>'+d.name+'</strong>'+'<br/> Performance: '+\n                    valueConstant(d)+' %'\n                    )\n                })\n                .on('mouseout', function(d){\n                    divTooltip.style('display', 'none')\n                })\n                        \n\t\n\t//add x and y axis\n\tvar yAxis = svg.append(\"g\")\n        .attr(\"class\", \"y axis\")\n        .call(yAxisScale)\n        .append(\"text\")\n        .attr(\"transform\", \"rotate(-90)\")\n        .attr(\"y\", 6)\n        .attr(\"dy\", \".71em\")\n        .style(\"text-anchor\", \"end\")\n        .style(\"fill\", \"#4d4d4d\")\n        .text(\"Peformance [%]\")\n    \n\n\t\n\tsvg.append(\"g\")\n        .attr(\"class\", \"x axis\")\n        .call(xAxisScale)\n        .attr(\"transform\", \"translate(0,\"+height/2+\")\")\n        .selectAll(\"text\")\n        .style(\"text-anchor\", \"end\")\n        .attr(\"dx\", \"1.2em\")\n        .attr(\"dy\", \"1em\")\n        .attr('overflow', 'visible')\n        .attr(\"transform\", \"rotate(-45)\")\n        .style('font-size', '8px')\n        //.style('text-decoration', 'underline')\n        .attr('fill', '#4d4d4d')\n        //.style('cursor', 'pointer')\n        //.on('mouseover', function(d){d3.select(this).style('font-size', '12px')})\n        //.on('mouseout', function(d){d3.select(this).style('font-size', '8px')})\n\n        //.call(wrap, 0)\n        \n    \n\t\n\n\n        function wrap(text, width) {\n            text.each(function () {\n                var text = d3.select(this),\n                    words = text.text().split(/\\s+/).reverse(),\n                    word,\n                    line = [],\n                    lineNumber = 0,\n                    lineHeight = 1, // ems\n                    y = text.attr(\"y\")-((words.length+1)*4),\n                    dy = parseFloat(text.attr(\"dy\")),\n                    tspan = text.text(null).append(\"tspan\").attr(\"x\", 0).attr(\"y\", y).attr(\"dy\", dy + \"em\");\n                while (word = words.pop()) {\n                    line.push(word);\n                    tspan.text(line.join(\" \"));\n                    if (tspan.node().getComputedTextLength() > width) {\n                        line.pop();\n                        tspan.text(line.join(\" \"));\n                        line = [word];\n                        tspan = text.append(\"tspan\").attr(\"x\", 0).attr(\"y\", y).attr(\"dy\", ++lineNumber * lineHeight + dy + \"em\").text(word);\n                    }\n                }\n            });\n          }\n     \n\n\n\n\n        /*\n        var margin = {top: 30, right: 10, bottom: 50, left: 50},\n        width = 150,\n        height = 150;\n\t\t\n        var data = [{value: 10, dataset:\"barbaz\"},\n        {value: 40, dataset:\"barbar\"},\n        {value: -10, dataset:\"foobaz\"},\n        {value: 50, dataset:\"foobar\"},\n        ];\n\n        // Add svg to\n        var svg = d3.select(d3Container.current)\n        .attr('class', 'root_netsentiment')\n        .append('svg')\n        .attr('width', width + margin.left + margin.right)\n        .attr('height', height + margin.top + margin.bottom)\n        .append('g')\n        .attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n        // set the ranges\n        var y = d3.scaleBand()\n            .range([height, 0])\n            .padding(0.1);\n\n        var x = d3.scaleLinear()\n            //.range([0, width])\n            .rangeRound([margin.left, width - margin.right])\n\n        // Scale the range of the data in the domains\n        x.domain(d3.extent(post_data, function (d) {return d.value;}));\n        \n        y.domain(post_data.map(function (d) {\n            return d.name;\n        }));\n\n        var xAxis = d3.axisBottom(x)\n        .ticks(5)\n\n        var yAxis = d3.axisRight(y)\n\n        // append the rectangles for the bar chart\n        svg.selectAll(\".bar\")\n            .data(post_data)\n            .enter().append(\"rect\")\n            .attr(\"class\", function (d) {\n                return \"bar bar--\" + (d.value < 0 ? \"negative\" : \"positive\");\n            })\n            .attr(\"x\", function (d) {\n                return x(Math.min(0, d.value));\n            })\n            .attr(\"y\", function (d) {\n                return y(d.name);\n            })\n            .attr(\"width\", function (d) {\n                return Math.abs(x(d.value) - x(0));\n            })\n            .attr(\"height\", y.bandwidth());\n\n        // add the x Axis\n        svg.append(\"g\")\n            .attr(\"class\", \"x axis\")\n            .attr(\"transform\", \"translate(0,\" + height + \")\")\n            .call(xAxis)\n            .selectAll(\".x.axis text\")\n            .style(\"fill\",\"#4d4d4d\")\n\n        // add the y Axis\n        svg.append(\"g\")\n            .attr(\"class\", \"y axis\")\n            .attr(\"transform\", \"translate(\" + x(0) + \",0)\")\n            .call(yAxis)\n            .selectAll(\".y.axis text\")\n            .style(\"fill\",\"#4d4d4d\")\n\n       */ \n\n    }, [choosenSentiment, \n        hover, \n        useComment, \n        useLike, \n        useShare, \n        commentWeight,\n        likeWeight,\n        shareWeight,\n        includeNet,\n        isSensitive]) // close useeffect\n\n    return(\n        <>\n        {/*\n        <div className='btnContainer'>\n          <button id='cha_button' className='groupButtonActive' onClick={()=>handleChangeData(choosenSentiment,'comments')}>Comments</button>\n          <button id='cat_button' className='groupButtonInactive' onClick={()=>handleChangeData(choosenSentiment,'likes')}>Likes</button>\n        </div>\n        */}\n            <div className='NetContainer'>\n                <div className=\"graphContainer\">\n                    <svg id='netSentiment' width={400} height={200} ref={d3Container}></svg> \n                </div>\n\n                <div className='textContainerNet'>\n                    <div className='NetHeadline'>Performance Score\n                        <i className=\"fas fa-info-circle checkbox_info\" data-tip data-for='scoreInfo' style={{marginLeft:'10px'}}></i>\n                            <ReactTooltip id='scoreInfo' className=\"bar_infoTooltip\" place=\"top\" textColor='#4d4d4d' backgroundColor='#FFDFC3'>\n                                <p>The score is ment to be used to <strong>compare posts</strong> with each other.</p>\n                            </ReactTooltip>\n                    </div>\n                    \n                    <div className='NetFormula'>\n                        \n                        <div>the Performane score is showing how well a post has performed in terms of <strong>engagement and sentiment.</strong></div>\n                    </div>\n\n                    \n\n                    <div className=\"AllCheckboxContainer\">\n                        <div className='checkboxInfoContainer'>\n                            <i className=\"fas fa-info-circle checkbox_info\" data-tip data-for='checkBoxInfo'></i>\n                                <ReactTooltip id='checkBoxInfo' className=\"bar_infoTooltip\" place=\"top\" textColor='#4d4d4d' backgroundColor='#FFDFC3'>\n                                    <p>Use the checkboxes to determine what <strong>engagement metrices</strong> to incude in the performance score</p>\n                                    <p>If, for example, you believe that a comment is worth twice as much as a like, set the comment to 2 and the like to 1</p>\n                                </ReactTooltip>\n                        </div>\n\n                        <div className={useLike?'CheckboxActive':'CheckboxInactive'}>\n                            <div>\n                                <input type=\"checkbox\" \n                                        name=\"foo\" \n                                        value=\"com\" \n                                        id=\"foo_com\"\n                                        checked={useLike}\n                                        onChange={()=>setUseLike(!(useLike))}/>\n                                <label className='checkLabel' for=\"foo_com\">Likes</label>\n                            </div>\n\n                            \n                            <div className='weightText'>One like is worth:</div>\n                            {/*<button className='weightBtn'>-</button>*/}\n                            <input className='weightInput' \n                                    type=\"number\" \n                                    onChange={handleLikeWeight}\n                                    value={likeWeight}\n                                    />\n                        \n                        </div>\n\n                        <div className={useComment?'CheckboxActive':'CheckboxInactive'}>\n                            <div>\n                                <input type=\"checkbox\" \n                                        name=\"foo\" \n                                        value=\"com\" \n                                        id=\"foo_com\"\n                                        checked={useComment}\n                                        onChange={()=>setUseComment(!(useComment))}/>\n                                <label className='checkLabel' for=\"foo_com\">Comment</label>\n                            </div>\n\n                            <div className='weightText'>One comment is worth:</div>\n                            {/*<button className='weightBtn'>-</button>*/}\n                            <input className='weightInput' \n                                    type=\"number\" \n                                    onChange={handleCommentWeight}\n                                    value={commentWeight}\n                                    />\n                        \n                        </div>\n\n                        <div className={useShare?'CheckboxActive':'CheckboxInactive'}>\n                            <div>\n                                <input type=\"checkbox\" \n                                        name=\"foo\" \n                                        value=\"com\" \n                                        id=\"foo_com\"\n                                        checked={useShare}\n                                        onChange={()=>setUseShare(!(useShare))}/>\n                                <label className='checkLabel' for=\"foo_com\">Shares</label>\n                            </div>\n\n                            \n                            <div className='weightText'>One share is worth:</div>\n                            {/*<button className='weightBtn'>-</button>*/}\n                            <input className='weightInput' \n                                    type=\"number\" \n                                    onChange={handleShareWeight}\n                                    value={shareWeight}\n                                    />\n                        \n                        </div>\n\n                    </div>\n\n                    <button id='cha_button' className={includeNet?'netButtonActive':'netButtonInactive'} onClick={()=>setIncludeNet(!includeNet)}>{includeNet?'Remove Net Sentiment': 'Include Net Sentiment'} </button>\n                    <i className=\"fas fa-info-circle bar_info\" data-tip data-for='NetSentInfo'></i>\n                        <ReactTooltip id='NetSentInfo' className=\"bar_infoTooltip\" place=\"top\" textColor='#4d4d4d' backgroundColor='#FFDFC3'>\n             \n                            <p>By including Net Sentiment, the <strong>sentiment</strong> of the post will be considered.</p>\n                            <p>A <strong>negative score </strong>indicates that the post got more negative than positive feedback.</p>\n\n                        </ReactTooltip>\n                    {includeNet?\n                    <>\n                    {/*\n                        <div className='NetFormula'>\n                            <span>Engagement *</span>(\n                            <span> 1x Positive</span>  -\n                            <span>{isSensitive?'2':'1'}x Negative</span>)\n                        </div>\n                            */}\n                        \n                        <div className='markBtnContainer'>\n                            <button id='cha_button' className={isSensitive?'netButtonActiveRed':'netButtonInactive'} onClick={()=>setIsSensitive(!isSensitive)}>{isSensitive?'Unmark as sensitive': 'Mark as sensitive'}</button>\n                            <i className=\"fas fa-info-circle bar_info\" data-tip data-for='sensitiveInfo'></i>\n                            <ReactTooltip id='sensitiveInfo' className=\"bar_infoTooltip\" place=\"top\" textColor='#4d4d4d' backgroundColor='#FFDFC3'>\n                \n                                <p>If the subject of the category or post is sensitive, each negative comment can <strong>cause more harm</strong> than for a regular post.</p>\n                                <p>By marking the post/category as sensitive, you will need two positive comments to <strong>outweigh</strong> one negative comment.</p>\n\n\n                            </ReactTooltip>\n                        </div>\n\n                    </>\n                    :null}\n\n                    \n\n\n\n                </div>\n            </div>\n           \n\n        </>\n    )\n}\n\nexport default NetSentiment","/Users/lovisaforsberg/MS_vis/ms_viz/src/components/login.js",["159","160","161","162","163","164","165"],"import React, { useContext, useEffect, useRef, useReducer, useState, createContext, useCallback } from \"react\";\nimport '../style/login.css'\nimport fire from '../firebase/fire'\nimport {UserContext} from '../App'\n\n\nconst Login = ()=> {\n\n    const SentUserContext = useContext(UserContext);\n    const {isUser, setIsUser} = SentUserContext\n\n\n    const handleSignUp = useCallback(async event => {\n        event.preventDefault();\n        const { email, password } = event.target.elements;\n        try {\n          await fire\n            .auth()\n            //.createUserWithEmailAndPassword(email.value, password.value);\n            .signInWithEmailAndPassword(email.value, password.value)\n            .then((response) =>{\n                setIsUser(response.user.email)\n            })\n\n        } catch (error) {\n          alert(error);\n        }\n      });  \n\n\n    return(\n        <>\n        <div className='loginContainer'>\n            <h1>Sign In</h1>\n            <form className='formContainer' onSubmit={handleSignUp}>\n                <label>\n                Email</label>\n                    <input className='signInInput' name=\"email\" type=\"email\" placeholder=\"Email\" />\n                \n                <label>\n                Password</label>\n                    <input className='signInInput' name=\"password\" type=\"password\" placeholder=\"Password\" />\n                \n                <button className='signInBtn' type=\"submit\">Sign In</button>\n            </form>\n        </div>\n\n        </>\n    )\n}\n\nexport default Login","/Users/lovisaforsberg/MS_vis/ms_viz/src/firebase/fire.js",[],"/Users/lovisaforsberg/MS_vis/ms_viz/src/components/Navbar.js",["166","167","168","169","170","171","172"],"import React, { useContext, useEffect, useRef, useReducer, useState, createContext, useCallback } from \"react\";\nimport '../style/Navbar.css'\nimport fire from '../firebase/fire'\nimport {UserContext} from '../App'\n\nconst Navbar = ()=>{\n\n    const SentUserContext = useContext(UserContext);\n    const {isUser, setIsUser} = SentUserContext\n\n    const handleSignout = () =>{\n        fire.auth().signOut().then(() => {\n            setIsUser(null)\n          }).catch((error) => {\n              \n            alert(error)\n          });\n\n    }\n \n        return (\n            <div className='navBarContainer'>\n                <h1 className='navbarHeadline'>JANUARY 2021 / OWNED CHANNELS</h1>\n                <button className='navbarBtn' onClick={handleSignout}>Sign Out</button>\n   \n            </div>\n        );\n    \n}\n\nexport default Navbar","/Users/lovisaforsberg/MS_vis/ms_viz/src/components/linechart.js",["173","174","175","176","177","178","179","180"],"import React, { useContext, useEffect, useRef, useReducer, useState, createContext } from \"react\";\nimport * as d3 from 'd3'\nimport ReactTooltip from 'react-tooltip';\nimport '../style/linechart.css'\nimport {SentimentContext} from '../App'\n\n\nconst LineChart = () =>{\n\n  const SentSentimentContext = useContext(SentimentContext);\n  const {choosenSentiment, setChoosenSentiment} = SentSentimentContext\n\n    const d3Container = useRef(null)\n\n    const [showSentiment, setShowSentiment] = useState(true)\n\n    //const [data, setGraphData] = useState([])\n\n    function getRandomInt(min, max) {\n      min = Math.ceil(min);\n      max = Math.floor(max);\n      return Math.floor(Math.random() * (max - min) + min); //The maximum is exclusive and the minimum is inclusive\n    }\n\n    const handleOption = (event) =>{\n      if(event.target.value ==='sent'){\n        setShowSentiment(true)\n      }\n      else{\n\n        setShowSentiment(false)\n      }\n    }\n\n    const sent_data = [\n      {name:'pos', sent_name:'Positive', values:[\n          {date:'August 2020', price: getRandomInt(15, 40)},\n          {date:'September 2020', price: getRandomInt(15, 40)},\n          {date:'October 2020', price: getRandomInt(15, 40)},\n          {date:'November 2020', price: getRandomInt(15, 40)},\n          {date:'December 2020', price: getRandomInt(15, 40)},\n          {date:'January 2021', price: getRandomInt(15, 40)},\n      ]},\n      {name:'neg', sent_name:'Negative', values:[\n          {date:'August 2020', price: getRandomInt(2, 18)},\n          {date:'September 2020', price: getRandomInt(2, 18)},\n          {date:'October 2020', price: getRandomInt(2, 18)},\n          {date:'November 2020', price: getRandomInt(2, 18)},\n          {date:'December 2020', price: getRandomInt(2, 18)},\n          {date:'January 2021', price: getRandomInt(2, 18)},\n      ]},\n      {name:'neu', sent_name:'Neutral', values:[\n          {date:'August 2020', price: '54'},\n          {date:'September 2020', price: '55'},\n          {date:'October 2020', price: '57'},\n          {date:'November 2020', price: '53'},\n          {date:'December 2020', price: '52'},\n          {date:'January 2021', price: '59'},\n      ]},\n    ]\n\n    const eng_data = [\n      {name:'pos', eng_name:'Comments', values:[\n          {date:'August 2020', price: getRandomInt(1,120)/100},\n          {date:'September 2020', price: getRandomInt(1,120)/100},\n          {date:'October 2020', price: getRandomInt(1,120)/100},\n          {date:'November 2020', price: getRandomInt(1,120)/100},\n          {date:'December 2020', price: getRandomInt(1,120)/100},\n          {date:'January 2021', price: getRandomInt(1,120)/100},\n      ]},\n      {name:'neg', eng_name:'Likes', values:[\n          {date:'August 2020', price: getRandomInt(1,230)/100},\n          {date:'September 2020', price: getRandomInt(1,230)/100},\n          {date:'October 2020', price: getRandomInt(1,230)/100},\n          {date:'November 2020', price: getRandomInt(1,230)/100},\n          {date:'December 2020', price: getRandomInt(1,230)/100},\n          {date:'January 2021', price: getRandomInt(1,230)/100},\n      ]},\n      {name:'neu', eng_name:'Shares', values:[\n          {date:'August 2020', price: getRandomInt(1,90)/100},\n          {date:'September 2020', price: getRandomInt(1,90)/100},\n          {date:'October 2020', price: getRandomInt(1,90)/100},\n          {date:'November 2020', price: getRandomInt(1,90)/100},\n          {date:'December 2020', price: getRandomInt(1,90)/100},\n          {date:'January 2021', price: getRandomInt(1,90)/100},\n      ]},\n    ]\n\n    \n\n\n    //const months = ['jan', 'feb', 'mars', 'april', 'may', 'june']\n\n    useEffect(()=>{\n\n    \n    const data = showSentiment?sent_data:eng_data\n\n    d3.select(\".root_linechart\").selectAll('*').remove()\n\n    var width = 400;\n    var height = 200;\n    //var margin = 35;\n    var margin = {top: 5, right: 10, bottom: 15, left: 35}\n\n    var duration = 250;\n\n    var lineOpacity = \"0.25\";\n    var lineOpacityHover = \"0.85\";\n    var otherLinesOpacityHover = \"0.1\";\n    var lineStroke = \"1.5px\";\n    var lineStrokeHover = \"2.5px\";\n\n    var circleOpacity = '0.85';\n    var circleOpacityOnLineHover = \"0.25\"\n    var circleRadius = 3;\n    var circleRadiusHover = 6;\n\nvar months = (data[0].values.map(value =>{return value.date}))\n\n\n/* Scale */\nvar xScale = d3.scalePoint()\n  .domain(months)\n  .rangeRound([0, width - margin.left])\n\n\nvar yScale = d3.scaleLinear()\n  .domain([0, showSentiment? 100: 2.3 ])\n  .range([height-margin.bottom, 0]);\n\nvar color = d3.scaleOrdinal(['#63A37B','#F15645', '#7D7D7D']);\n\nvar color_eng = d3.scaleOrdinal(['#005282', '#336D90', '#6692AC']);\n\n/* Add SVG */\nvar svg = d3.select(d3Container.current)\n.attr('class', 'root_linechart')\n.append(\"svg\")\n.attr(\"width\", width + margin.left + margin.right)\n.attr(\"height\", height + margin.top + margin.bottom)\n  .append('g')\n  .attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\");\n\n  var tooltip = d3.select('#tooltip');\n  var tooltipLine = svg.append('line');\n\n  var divTooltip = d3\n        .select('body')\n        .append('div')\n        .attr('class', 'toolTip')\n        .attr('font-size', '100px')\n\n\n/* Add line into SVG */\nvar line = d3.line()\n  .x(d => xScale(d.date))\n  .y(d => yScale(d.price));\n\nlet lines = svg.append('g')\n  .attr('class', 'lines');\n\n\nlines.selectAll('.line-group')\n  .data(data).enter()\n  .append('g')\n  .attr('class', 'line-group')  \n  .append('path')\n  .attr('class', 'line visible')  \n  .attr('id', d=>d.name)\n  .attr('d', d => line(d.values))\n  .style('stroke', (d, i) => showSentiment?color(i):color_eng(i))\n  .style('opacity', lineOpacity)\n  \n\n\n/*transparent lines*/\nlines.selectAll('.line-group-transparent')\n  .data(data).enter()\n  .append('g')\n  .attr('class', 'line-group-transparent')  \n  .on(\"mouseover\", function(d, i) {\n      svg.append(\"text\")\n        .attr(\"class\", \"title-text\")\n        .style(\"fill\", showSentiment?color(i):color_eng(i))        \n        .text(showSentiment?d.sent_name:d.eng_name)\n        .attr(\"text-anchor\", \"middle\")\n        .attr(\"x\", (width-margin.left)/2)\n        .attr(\"y\", 15);\n    })\n  .on(\"mouseout\", function(d) {\n      svg.select(\".title-text\").remove();\n    })\n  .append('path')\n  .attr('class', 'line')  \n  .attr('d', d => line(d.values))\n  .style(\"stroke-width\", '8px')\n  .style('stroke', (d, i) => showSentiment?color(i):color_eng(i))\n\n  .style('opacity', '0')\n  .on(\"mouseover\", function(d) {\n    d3.selectAll('.visible')\n        .style('opacity', otherLinesOpacityHover);\n    d3.selectAll('.circle')\n        .style('opacity', circleOpacityOnLineHover);\n    d3.select('#'+d.name)\n      .style('opacity', lineOpacityHover)\n      .style(\"stroke-width\", lineStrokeHover)\n      .style(\"cursor\", \"pointer\");\n  })\n.on(\"mouseout\", function(d) {\n    d3.selectAll(\".visible\")\n        .style('opacity', lineOpacity);\n    d3.selectAll('.circle')\n        .style('opacity', circleOpacity);\n    d3.select('#'+d.name)\n      .style(\"stroke-width\", lineStroke)\n      .style(\"cursor\", \"none\");\n  });\n  \n\n\n/* Add circles in the line */\nlines.selectAll(\"circle-group\")\n  .data(data).enter()\n  .append(\"g\")\n  .style(\"fill\", (d, i) => showSentiment?color(i):color_eng(i))\n  .selectAll(\"circle\")\n  .data(d => d.values).enter()\n  .append(\"g\")\n  .attr(\"class\", \"circle\")  \n  .append(\"circle\")\n  .attr(\"cx\", d => xScale(d.date))\n  .attr(\"cy\", d => yScale(d.price))\n  .attr(\"r\", circleRadius)\n  .style('opacity', circleOpacity)\n  \n\n/* Add transoarent circles */\nlines.selectAll(\"circle-group\")\n  .data(data).enter()\n  .append(\"g\")\n  .selectAll(\"circle\")\n  .data(d => d.values).enter()\n  .append(\"g\")\n  .attr(\"class\", \"circle\")  \n  .on(\"mouseover\", function(d){drawTooltip(d.date)})\n  .on(\"mouseout\", \n    function(d){\n    removeTooltip()\n    divTooltip.style('display', 'none')\n    })\n  .append(\"circle\")\n  .attr(\"cx\", d => xScale(d.date))\n  .attr(\"cy\", d => yScale(d.price))\n  .attr(\"r\", 6)\n  .style('opacity', '0')\n  .on(\"mouseover\", function(d) {\n        d3.select(this)\n          .transition()\n          .duration(duration)\n          .attr(\"r\", circleRadiusHover);\n      })\n    .on(\"mouseout\", function(d) {\n        d3.select(this) \n          .transition()\n          .duration(duration)\n          .attr(\"r\", circleRadius);  \n      });\n\n\n/* Add Axis into SVG */\nvar xAxis = d3.axisBottom(xScale)\n            .ticks(5);\n\nvar yAxis = d3.axisLeft(yScale)\n            .ticks(5)\n            .tickFormat(function(d) {return d+ \"%\"});\n\nsvg.append(\"g\")\n  .attr(\"class\", \"x axis\")\n  .attr(\"transform\", `translate(0, ${height-margin.bottom})`)\n  .call(xAxis)\n  .selectAll(\".tick text\")\n  .call(wrap, 20)\n\nsvg.append(\"g\")\n  .attr(\"class\", \"y axis\")\n  .call(yAxis)\n  .append('text')\n  .attr(\"y\", 15)\n  .attr('x', 5)\n  .attr(\"text-anchor\", \"start\")\n  .attr(\"transform\", \"rotate(-0)\")\n  .attr(\"fill\", \"#000\")\n  .text(showSentiment?'Sentiment [%]':'Engagement rate [%]');\n\nfunction removeTooltip() {\n    if (tooltip) tooltip.style('display', 'none');\n    if (tooltipLine) tooltipLine.attr('stroke', 'none');\n  }\n\n  function drawTooltip(date) {\n\n    var pos = 0\n    var neg = 0\n    var neu = 0\n\n    var values = []\n    data.forEach(element => {\n        if(element.name === 'pos'){\n            element.values.forEach(month=>{\n                if (month.date === date){\n                    pos = month.price\n                    values.push({name:'pos', eng_name:'Comments', value:month.price})\n                }\n            })\n        }\n        if(element.name === 'neg'){\n            element.values.forEach(month=>{\n                if (month.date === date){\n                    neg = month.price\n                    values.push({name:'neg',eng_name:'Likes', value:month.price})\n\n                }\n            })\n        }\n        if(element.name === 'neu'){\n            element.values.forEach(month=>{\n                if (month.date === date){\n                    neu = month.price\n                    values.push({name:'neu', eng_name:'Shares', value:month.price})\n\n                }\n            })\n        }\n    });\n\n    values.sort((a, b) => b.value - a.value);\n\n      \n    tooltipLine.attr('stroke', 'grey')\n      .attr('x1', xScale(date))\n      .attr('x2', xScale(date))\n      .attr('y1', 0)\n      .attr('y2', height-margin.bottom);\n \n      divTooltip\n      .style('left', d3.event.pageX+10+'px')\n      .style('top', d3.event.pageY-25+'px')\n      .style('display', 'inline-block')\n      .html(showSentiment?\n        values.map(item=>{\n         return ('<span class=dot_'+(item.name)+'></span> '+(item.value) +'% </br>')\n        })\n        :\n        values.map(item=>{\n          return ('<span class=dot_'+(item.eng_name)+'></span> '+(item.eng_name)+': '+(item.value) +'% </br>')\n         })\n      \n      )\n \n  }\n\n  function wrap(text, width) {\n    text.each(function () {\n        var text = d3.select(this),\n            words = text.text().split(/\\s+/).reverse(),\n            word,\n            line = [],\n            lineNumber = 0,\n            lineHeight = 1, // ems\n            y = text.attr(\"y\")-((words.length+1)*4),\n            dy = parseFloat(text.attr(\"dy\")),\n            tspan = text.text(null).append(\"tspan\").attr(\"x\", 0).attr(\"y\", y).attr(\"dy\", dy + \"em\");\n        while (word = words.pop()) {\n            line.push(word);\n            tspan.text(line.join(\" \"));\n            if (tspan.node().getComputedTextLength() > width) {\n                line.pop();\n                tspan.text(line.join(\" \"));\n                line = [word];\n                tspan = text.append(\"tspan\").attr(\"x\", 0).attr(\"y\", y).attr(\"dy\", ++lineNumber * lineHeight + dy + \"em\").text(word);\n            }\n        }\n    });\n  }\n\n    }, [choosenSentiment, showSentiment])\n\n    return(\n        <>\n       \n      <div className='lineContainer'>\n\n        <div className='line_infoContainer'>\n        <text style={{marginRight:'8px'}} className='NetFormula'> Showing change over time for: <strong>{choosenSentiment.name}</strong></text>\n\n            <i className=\"fas fa-info-circle bar_info\" data-tip data-for='linechartInfo'></i>\n            <ReactTooltip id='linechartInfo' className=\"bar_infoTooltip\" place=\"top\" textColor='#4d4d4d' backgroundColor='#FFDFC3'>\n             \n              <p>The graph shows the engagemet rate or sentiment for <strong>all posts</strong> in the chosen category or channel per month</p>\n              \n\n            </ReactTooltip>        \n          </div>\n\n      <div className='linechartContainer'>\n            <div className='lineDropdownContainer'>\n              <select className='LinedropDown' onChange={e => handleOption(e)}>\n                <option value='sent'>Sentiment</option>    \n                <option value='eng'>Engagement</option>           \n              </select>\n            </div>\n          \n\n          \n          \n          <svg id='lineChart' width=\"440\" height=\"220\" ref={d3Container}></svg>\n          </div>\n          </div>\n        </>\n    )\n}\n\nexport default LineChart\n",{"ruleId":"181","replacedBy":"182"},{"ruleId":"183","replacedBy":"184"},{"ruleId":"185","severity":1,"message":"186","line":1,"column":17,"nodeType":"187","messageId":"188","endLine":1,"endColumn":27},{"ruleId":"185","severity":1,"message":"189","line":1,"column":29,"nodeType":"187","messageId":"188","endLine":1,"endColumn":38},{"ruleId":"185","severity":1,"message":"190","line":1,"column":40,"nodeType":"187","messageId":"188","endLine":1,"endColumn":46},{"ruleId":"185","severity":1,"message":"191","line":1,"column":48,"nodeType":"187","messageId":"188","endLine":1,"endColumn":58},{"ruleId":"185","severity":1,"message":"192","line":3,"column":13,"nodeType":"187","messageId":"188","endLine":3,"endColumn":15},{"ruleId":"185","severity":1,"message":"193","line":5,"column":8,"nodeType":"187","messageId":"188","endLine":5,"endColumn":16},{"ruleId":"185","severity":1,"message":"194","line":6,"column":26,"nodeType":"187","messageId":"188","endLine":6,"endColumn":42},{"ruleId":"185","severity":1,"message":"195","line":8,"column":8,"nodeType":"187","messageId":"188","endLine":8,"endColumn":20},{"ruleId":"185","severity":1,"message":"191","line":1,"column":48,"nodeType":"187","messageId":"188","endLine":1,"endColumn":58},{"ruleId":"185","severity":1,"message":"196","line":1,"column":70,"nodeType":"187","messageId":"188","endLine":1,"endColumn":83},{"ruleId":"185","severity":1,"message":"197","line":23,"column":10,"nodeType":"187","messageId":"188","endLine":23,"endColumn":15},{"ruleId":"185","severity":1,"message":"198","line":29,"column":19,"nodeType":"187","messageId":"188","endLine":29,"endColumn":29},{"ruleId":"199","severity":1,"message":"200","line":46,"column":11,"nodeType":"187","messageId":"201","endLine":46,"endColumn":13},{"ruleId":"185","severity":1,"message":"202","line":134,"column":13,"nodeType":"187","messageId":"188","endLine":134,"endColumn":18},{"ruleId":"185","severity":1,"message":"203","line":142,"column":13,"nodeType":"187","messageId":"188","endLine":142,"endColumn":19},{"ruleId":"185","severity":1,"message":"204","line":266,"column":12,"nodeType":"187","messageId":"188","endLine":266,"endColumn":31},{"ruleId":"185","severity":1,"message":"205","line":313,"column":10,"nodeType":"187","messageId":"188","endLine":313,"endColumn":23},{"ruleId":"206","severity":1,"message":"207","line":407,"column":14,"nodeType":"208","messageId":"209","endLine":407,"endColumn":32},{"ruleId":"210","severity":1,"message":"211","line":420,"column":8,"nodeType":"212","endLine":420,"endColumn":21,"suggestions":"213"},{"ruleId":"185","severity":1,"message":"191","line":1,"column":48,"nodeType":"187","messageId":"188","endLine":1,"endColumn":58},{"ruleId":"185","severity":1,"message":"214","line":1,"column":60,"nodeType":"187","messageId":"188","endLine":1,"endColumn":68},{"ruleId":"185","severity":1,"message":"196","line":1,"column":70,"nodeType":"187","messageId":"188","endLine":1,"endColumn":83},{"ruleId":"185","severity":1,"message":"215","line":17,"column":30,"nodeType":"187","messageId":"188","endLine":17,"endColumn":49},{"ruleId":"185","severity":1,"message":"216","line":20,"column":12,"nodeType":"187","messageId":"188","endLine":20,"endColumn":21},{"ruleId":"185","severity":1,"message":"217","line":28,"column":13,"nodeType":"187","messageId":"188","endLine":28,"endColumn":19},{"ruleId":"185","severity":1,"message":"218","line":152,"column":18,"nodeType":"187","messageId":"188","endLine":152,"endColumn":24},{"ruleId":"206","severity":1,"message":"207","line":183,"column":20,"nodeType":"208","messageId":"209","endLine":183,"endColumn":38},{"ruleId":"185","severity":1,"message":"190","line":1,"column":40,"nodeType":"187","messageId":"188","endLine":1,"endColumn":46},{"ruleId":"185","severity":1,"message":"191","line":1,"column":48,"nodeType":"187","messageId":"188","endLine":1,"endColumn":58},{"ruleId":"185","severity":1,"message":"219","line":1,"column":85,"nodeType":"187","messageId":"188","endLine":1,"endColumn":93},{"ruleId":"185","severity":1,"message":"192","line":2,"column":13,"nodeType":"187","messageId":"188","endLine":2,"endColumn":15},{"ruleId":"185","severity":1,"message":"215","line":20,"column":30,"nodeType":"187","messageId":"188","endLine":20,"endColumn":49},{"ruleId":"185","severity":1,"message":"220","line":58,"column":14,"nodeType":"187","messageId":"188","endLine":58,"endColumn":31},{"ruleId":"210","severity":1,"message":"221","line":72,"column":5,"nodeType":"187","endLine":72,"endColumn":14,"suggestions":"222"},{"ruleId":"185","severity":1,"message":"191","line":1,"column":48,"nodeType":"187","messageId":"188","endLine":1,"endColumn":58},{"ruleId":"185","severity":1,"message":"196","line":1,"column":70,"nodeType":"187","messageId":"188","endLine":1,"endColumn":83},{"ruleId":"185","severity":1,"message":"223","line":9,"column":9,"nodeType":"187","messageId":"188","endLine":9,"endColumn":24},{"ruleId":"185","severity":1,"message":"215","line":18,"column":30,"nodeType":"187","messageId":"188","endLine":18,"endColumn":49},{"ruleId":"185","severity":1,"message":"216","line":21,"column":12,"nodeType":"187","messageId":"188","endLine":21,"endColumn":21},{"ruleId":"185","severity":1,"message":"224","line":24,"column":19,"nodeType":"187","messageId":"188","endLine":24,"endColumn":27},{"ruleId":"185","severity":1,"message":"225","line":27,"column":20,"nodeType":"187","messageId":"188","endLine":27,"endColumn":29},{"ruleId":"185","severity":1,"message":"226","line":30,"column":28,"nodeType":"187","messageId":"188","endLine":30,"endColumn":45},{"ruleId":"185","severity":1,"message":"227","line":39,"column":12,"nodeType":"187","messageId":"188","endLine":39,"endColumn":24},{"ruleId":"185","severity":1,"message":"228","line":39,"column":26,"nodeType":"187","messageId":"188","endLine":39,"endColumn":41},{"ruleId":"185","severity":1,"message":"229","line":40,"column":12,"nodeType":"187","messageId":"188","endLine":40,"endColumn":21},{"ruleId":"185","severity":1,"message":"230","line":40,"column":23,"nodeType":"187","messageId":"188","endLine":40,"endColumn":35},{"ruleId":"185","severity":1,"message":"231","line":41,"column":12,"nodeType":"187","messageId":"188","endLine":41,"endColumn":22},{"ruleId":"185","severity":1,"message":"232","line":41,"column":24,"nodeType":"187","messageId":"188","endLine":41,"endColumn":37},{"ruleId":"185","severity":1,"message":"233","line":124,"column":12,"nodeType":"187","messageId":"188","endLine":124,"endColumn":19},{"ruleId":"185","severity":1,"message":"234","line":125,"column":11,"nodeType":"187","messageId":"188","endLine":125,"endColumn":21},{"ruleId":"235","severity":1,"message":"236","line":300,"column":49,"nodeType":"237","messageId":"238","endLine":300,"endColumn":51},{"ruleId":"235","severity":1,"message":"236","line":314,"column":64,"nodeType":"237","messageId":"238","endLine":314,"endColumn":66},{"ruleId":"239","severity":1,"message":"240","line":332,"column":77,"nodeType":"237","messageId":"241","endLine":332,"endColumn":78},{"ruleId":"185","severity":1,"message":"242","line":401,"column":14,"nodeType":"187","messageId":"188","endLine":401,"endColumn":18},{"ruleId":"206","severity":1,"message":"207","line":412,"column":16,"nodeType":"208","messageId":"209","endLine":412,"endColumn":34},{"ruleId":"210","severity":1,"message":"243","line":426,"column":7,"nodeType":"212","endLine":426,"endColumn":43,"suggestions":"244"},{"ruleId":"185","severity":1,"message":"190","line":1,"column":40,"nodeType":"187","messageId":"188","endLine":1,"endColumn":46},{"ruleId":"185","severity":1,"message":"191","line":1,"column":48,"nodeType":"187","messageId":"188","endLine":1,"endColumn":58},{"ruleId":"185","severity":1,"message":"196","line":1,"column":70,"nodeType":"187","messageId":"188","endLine":1,"endColumn":83},{"ruleId":"185","severity":1,"message":"192","line":2,"column":13,"nodeType":"187","messageId":"188","endLine":2,"endColumn":15},{"ruleId":"185","severity":1,"message":"215","line":12,"column":30,"nodeType":"187","messageId":"188","endLine":12,"endColumn":49},{"ruleId":"185","severity":1,"message":"245","line":15,"column":23,"nodeType":"187","messageId":"188","endLine":15,"endColumn":35},{"ruleId":"185","severity":1,"message":"246","line":18,"column":12,"nodeType":"187","messageId":"188","endLine":18,"endColumn":18},{"ruleId":"185","severity":1,"message":"247","line":20,"column":12,"nodeType":"187","messageId":"188","endLine":20,"endColumn":21},{"ruleId":"185","severity":1,"message":"248","line":20,"column":23,"nodeType":"187","messageId":"188","endLine":20,"endColumn":35},{"ruleId":"185","severity":1,"message":"249","line":22,"column":17,"nodeType":"187","messageId":"188","endLine":22,"endColumn":23},{"ruleId":"250","severity":1,"message":"251","line":50,"column":45,"nodeType":"252","messageId":"253","endLine":50,"endColumn":110},{"ruleId":"199","severity":1,"message":"254","line":63,"column":13,"nodeType":"187","messageId":"201","endLine":63,"endColumn":22},{"ruleId":"199","severity":1,"message":"255","line":64,"column":13,"nodeType":"187","messageId":"201","endLine":64,"endColumn":20},{"ruleId":"199","severity":1,"message":"254","line":68,"column":13,"nodeType":"187","messageId":"201","endLine":68,"endColumn":22},{"ruleId":"199","severity":1,"message":"255","line":69,"column":13,"nodeType":"187","messageId":"201","endLine":69,"endColumn":20},{"ruleId":"199","severity":1,"message":"254","line":73,"column":13,"nodeType":"187","messageId":"201","endLine":73,"endColumn":22},{"ruleId":"199","severity":1,"message":"255","line":74,"column":13,"nodeType":"187","messageId":"201","endLine":74,"endColumn":20},{"ruleId":"210","severity":1,"message":"256","line":89,"column":8,"nodeType":"212","endLine":89,"endColumn":10,"suggestions":"257"},{"ruleId":"258","severity":1,"message":"259","line":97,"column":17,"nodeType":"260","endLine":97,"endColumn":86},{"ruleId":"258","severity":1,"message":"259","line":115,"column":17,"nodeType":"260","endLine":115,"endColumn":65},{"ruleId":"261","severity":1,"message":"262","line":116,"column":21,"nodeType":"260","endLine":116,"endColumn":92},{"ruleId":"258","severity":1,"message":"259","line":119,"column":17,"nodeType":"260","endLine":119,"endColumn":86},{"ruleId":"185","severity":1,"message":"191","line":1,"column":48,"nodeType":"187","messageId":"188","endLine":1,"endColumn":58},{"ruleId":"185","severity":1,"message":"196","line":1,"column":70,"nodeType":"187","messageId":"188","endLine":1,"endColumn":83},{"ruleId":"185","severity":1,"message":"215","line":13,"column":30,"nodeType":"187","messageId":"188","endLine":13,"endColumn":49},{"ruleId":"185","severity":1,"message":"224","line":17,"column":19,"nodeType":"187","messageId":"188","endLine":17,"endColumn":27},{"ruleId":"185","severity":1,"message":"226","line":20,"column":28,"nodeType":"187","messageId":"188","endLine":20,"endColumn":45},{"ruleId":"235","severity":1,"message":"236","line":40,"column":26,"nodeType":"237","messageId":"238","endLine":40,"endColumn":28},{"ruleId":"235","severity":1,"message":"236","line":52,"column":26,"nodeType":"237","messageId":"238","endLine":52,"endColumn":28},{"ruleId":"185","severity":1,"message":"263","line":112,"column":13,"nodeType":"187","messageId":"188","endLine":112,"endColumn":22},{"ruleId":"185","severity":1,"message":"264","line":149,"column":9,"nodeType":"187","messageId":"188","endLine":149,"endColumn":13},{"ruleId":"239","severity":1,"message":"240","line":176,"column":56,"nodeType":"237","messageId":"241","endLine":176,"endColumn":57},{"ruleId":"185","severity":1,"message":"265","line":186,"column":6,"nodeType":"187","messageId":"188","endLine":186,"endColumn":11},{"ruleId":"185","severity":1,"message":"242","line":222,"column":18,"nodeType":"187","messageId":"188","endLine":222,"endColumn":22},{"ruleId":"206","severity":1,"message":"207","line":233,"column":24,"nodeType":"208","messageId":"209","endLine":233,"endColumn":42},{"ruleId":"210","severity":1,"message":"266","line":327,"column":8,"nodeType":"212","endLine":336,"endColumn":21,"suggestions":"267"},{"ruleId":"185","severity":1,"message":"189","line":1,"column":29,"nodeType":"187","messageId":"188","endLine":1,"endColumn":38},{"ruleId":"185","severity":1,"message":"190","line":1,"column":40,"nodeType":"187","messageId":"188","endLine":1,"endColumn":46},{"ruleId":"185","severity":1,"message":"191","line":1,"column":48,"nodeType":"187","messageId":"188","endLine":1,"endColumn":58},{"ruleId":"185","severity":1,"message":"214","line":1,"column":60,"nodeType":"187","messageId":"188","endLine":1,"endColumn":68},{"ruleId":"185","severity":1,"message":"196","line":1,"column":70,"nodeType":"187","messageId":"188","endLine":1,"endColumn":83},{"ruleId":"185","severity":1,"message":"268","line":10,"column":12,"nodeType":"187","messageId":"188","endLine":10,"endColumn":18},{"ruleId":"210","severity":1,"message":"269","line":13,"column":26,"nodeType":"187","endLine":13,"endColumn":37},{"ruleId":"185","severity":1,"message":"189","line":1,"column":29,"nodeType":"187","messageId":"188","endLine":1,"endColumn":38},{"ruleId":"185","severity":1,"message":"190","line":1,"column":40,"nodeType":"187","messageId":"188","endLine":1,"endColumn":46},{"ruleId":"185","severity":1,"message":"191","line":1,"column":48,"nodeType":"187","messageId":"188","endLine":1,"endColumn":58},{"ruleId":"185","severity":1,"message":"214","line":1,"column":60,"nodeType":"187","messageId":"188","endLine":1,"endColumn":68},{"ruleId":"185","severity":1,"message":"196","line":1,"column":70,"nodeType":"187","messageId":"188","endLine":1,"endColumn":83},{"ruleId":"185","severity":1,"message":"270","line":1,"column":85,"nodeType":"187","messageId":"188","endLine":1,"endColumn":96},{"ruleId":"185","severity":1,"message":"268","line":9,"column":12,"nodeType":"187","messageId":"188","endLine":9,"endColumn":18},{"ruleId":"185","severity":1,"message":"191","line":1,"column":48,"nodeType":"187","messageId":"188","endLine":1,"endColumn":58},{"ruleId":"185","severity":1,"message":"196","line":1,"column":70,"nodeType":"187","messageId":"188","endLine":1,"endColumn":83},{"ruleId":"185","severity":1,"message":"215","line":11,"column":28,"nodeType":"187","messageId":"188","endLine":11,"endColumn":47},{"ruleId":"185","severity":1,"message":"271","line":314,"column":21,"nodeType":"187","messageId":"188","endLine":314,"endColumn":24},{"ruleId":"185","severity":1,"message":"272","line":322,"column":21,"nodeType":"187","messageId":"188","endLine":322,"endColumn":24},{"ruleId":"185","severity":1,"message":"273","line":331,"column":21,"nodeType":"187","messageId":"188","endLine":331,"endColumn":24},{"ruleId":"206","severity":1,"message":"207","line":376,"column":16,"nodeType":"208","messageId":"209","endLine":376,"endColumn":34},{"ruleId":"210","severity":1,"message":"274","line":389,"column":8,"nodeType":"212","endLine":389,"endColumn":41,"suggestions":"275"},"no-native-reassign",["276"],"no-negated-in-lhs",["277"],"no-unused-vars","'useContext' is defined but never used.","Identifier","unusedVar","'useEffect' is defined but never used.","'useRef' is defined but never used.","'useReducer' is defined but never used.","'d3' is defined but never used.","'PieChart' is defined but never used.","'HoverSentContext' is defined but never used.","'NetSentiment' is defined but never used.","'createContext' is defined but never used.","'hover' is assigned a value but never used.","'setNavText' is assigned a value but never used.","no-redeclare","'ar' is already defined.","redeclared","'color' is assigned a value but never used.","'format' is assigned a value but never used.","'computeTextRotation' is defined but never used.","'isTextVisible' is defined but never used.","no-cond-assign","Expected a conditional expression and instead saw an assignment.","AssignmentExpression","missing","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'groupByChannel', 'handleFilter', 'handleHover', and 'navText'. Either include them or remove the dependency array.","ArrayExpression",["278"],"'useState' is defined but never used.","'setChoosenSentiment' is assigned a value but never used.","'hoverSent' is assigned a value but never used.","'totals' is assigned a value but never used.","'change' is defined but never used.","'Children' is defined but never used.","'startsWithCapital' is defined but never used.","React Hook useEffect contains a call to 'setNavText'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [handlePost, choosenSentiment.name, handleNav] as a second argument to the useEffect Hook.",["279"],"'allPostsContext' is defined but never used.","'setHover' is assigned a value but never used.","'setIsPost' is assigned a value but never used.","'setGroupByChannel' is assigned a value but never used.","'showComments' is assigned a value but never used.","'setShowComments' is assigned a value but never used.","'showLikes' is assigned a value but never used.","'setShowLikes' is assigned a value but never used.","'showShares' is assigned a value but never used.","'setShowShares' is assigned a value but never used.","'btnText' is assigned a value but never used.","'changeData' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-useless-concat","Unexpected string concatenation of literals.","unexpectedConcat","'wrap' is defined but never used.","React Hook useEffect has missing dependencies: 'groupByChannel', 'handleFilter', 'handleHover', 'keys', 'post_data', 'setHoverSent', and 'stack_key_mapping'. Either include them or remove the dependency array.",["280"],"'setHoverSent' is assigned a value but never used.","'isPost' is assigned a value but never used.","'highlight' is assigned a value but never used.","'setHighlight' is assigned a value but never used.","'setImg' is assigned a value but never used.","no-loop-func","Function declared in a loop contains unsafe references to variable(s) 'sentiment'.","ArrowFunctionExpression","unsafeRefs","'sentiment' is already defined.","'insight' is already defined.","React Hook useEffect has a missing dependency: 'handlePost'. Either include it or remove the dependency array.",["281"],"react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","JSXOpeningElement","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","'minHeight' is assigned a value but never used.","'bars' is assigned a value but never used.","'yAxis' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'groupByChannel' and 'postData'. Either include them or remove the dependency array.",["282"],"'isUser' is assigned a value but never used.","React Hook useCallback does nothing when called with only one argument. Did you forget to pass an array of dependencies?","'useCallback' is defined but never used.","'pos' is assigned a value but never used.","'neg' is assigned a value but never used.","'neu' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'eng_data' and 'sent_data'. Either include them or remove the dependency array.",["283"],"no-global-assign","no-unsafe-negation",{"desc":"284","fix":"285"},{"desc":"286","fix":"287"},{"desc":"288","fix":"289"},{"desc":"290","fix":"291"},{"desc":"292","fix":"293"},{"desc":"294","fix":"295"},"Update the dependencies array to be: [choosenData, groupByChannel, handleFilter, handleHover, navText]",{"range":"296","text":"297"},"Add dependencies array: [handlePost, choosenSentiment.name, handleNav]",{"range":"298","text":"299"},"Update the dependencies array to be: [choosenSentiment, hover, barFilter, groupByChannel, keys, post_data, stack_key_mapping, handleHover, setHoverSent, handleFilter]",{"range":"300","text":"301"},"Update the dependencies array to be: [handlePost]",{"range":"302","text":"303"},"Update the dependencies array to be: [choosenSentiment, hover, useComment, useLike, useShare, commentWeight, likeWeight, shareWeight, includeNet, isSensitive, postData, groupByChannel]",{"range":"304","text":"305"},"Update the dependencies array to be: [choosenSentiment, eng_data, sent_data, showSentiment]",{"range":"306","text":"307"},[12874,12887],"[choosenData, groupByChannel, handleFilter, handleHover, navText]",[2070,2070],", [handlePost, choosenSentiment.name, handleNav]",[15014,15050],"[choosenSentiment, hover, barFilter, groupByChannel, keys, post_data, stack_key_mapping, handleHover, setHoverSent, handleFilter]",[2888,2890],"[handlePost]",[10555,10753],"[choosenSentiment, hover, useComment, useLike, useShare, commentWeight, likeWeight, shareWeight, includeNet, isSensitive, postData, groupByChannel]",[11598,11631],"[choosenSentiment, eng_data, sent_data, showSentiment]"]